{"version":3,"file":"core.cjs.js","mappings":"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","sources":["webpack://@tkey/core/webpack/bootstrap","webpack://@tkey/core/webpack/runtime/compat get default export","webpack://@tkey/core/webpack/runtime/define property getters","webpack://@tkey/core/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/core/webpack/runtime/make namespace object","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/core/external commonjs2 \"@tkey/common-types\"","webpack://@tkey/core/external commonjs2 \"json-stable-stringify\"","webpack://@tkey/core/external commonjs2 \"web3-utils\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@tkey/core/./src/errors.ts","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/toConsumableArray\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/core/external commonjs2 \"bn.js\"","webpack://@tkey/core/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@tkey/core/./src/lagrangeInterpolatePolynomial.ts","webpack://@tkey/core/./src/metadata.ts","webpack://@tkey/core/./src/authMetadata.ts","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/typeof\"","webpack://@tkey/core/./src/core.ts","webpack://@tkey/core/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","import { ErrorCodes, ITkeyError, TkeyError } from \"@tkey/common-types\";\n\n/**\n * CoreError, extension for Error using CustomError\n * details: github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n *\n * Usage:\n * 1. throw CoreError.metadataUndefined() // regularly used errors\n * 2. throw CoreError.fromCode(1304); // throw via code\n * 3. throw new CoreError(1000, \"share indexes should be unique\"); // for scarce errors\n *\n * Guide:\n * 1000 - core\n * 2000 - security questions\n * 3000 - webstorage\n * 4000 - common types (code reserved for future implementation)\n * 5000 - private key\n * 6000 - seed phrase\n * 7000 - share serialization\n * 8000 - share transfer\n */\nclass CoreError extends TkeyError {\n  protected static messages: ErrorCodes = {\n    1000: \"Custom\",\n    // Misc\n    1001: \"Unable to delete service provider share\",\n    1002: \"Wrong share index\",\n    1003: \"Unable to updateSDK\",\n    // metadata\n    1101: \"metadata not found, SDK likely not initialized\",\n    1102: \"getMetadata errored\",\n    1103: \"setMetadata errored\",\n    1104: \"previouslyFetchedCloudMetadata provided in initialization is outdated\",\n    1105: \"previouslyFetchedCloudMetadata.nonce should never be higher than the latestShareDetails, please contact support\",\n    // tkeystore\n    1201: \"Invalid tkeyStore\",\n    1202: \"Encryption failed\",\n    1203: \"Decryption failed\",\n    // shares\n    1301: \"Private key not available. Please reconstruct key first\",\n    1302: \"Unable to reconstruct\",\n    1303: \"reconstructed key is not pub key\",\n    1304: \"Share found in unexpected polynomial\",\n    1305: \"Input is not supported\",\n    1306: \"no encrypted share store for share exists\",\n    1307: \"Share doesn't exist\",\n    1308: \"Share was deleted\",\n    // lock\n    1401: \"Unable to acquire lock\",\n    1402: \"Unable to release lock\",\n    // auth metadata\n    1501: \"privkey unavailable\",\n    1502: \"metadata pubkey unavailable\",\n    1503: \"getAuthMetadata errored\",\n    1504: \"setAuthMetadata errored\",\n    1601: \"delete1OutOf1 requires manualSync=true\",\n  };\n\n  public constructor(code: number, message: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"CoreError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): ITkeyError {\n    return new CoreError(code, `${CoreError.messages[code]} ${extraMessage}`);\n  }\n\n  public static default(extraMessage = \"\"): ITkeyError {\n    return new CoreError(1000, `${CoreError.messages[1000]} ${extraMessage}`);\n  }\n\n  // Custom methods\n  // Metadata\n  public static metadataUndefined(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1101, extraMessage);\n  }\n\n  public static delete1OutOf1OnlyManualSync(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1601, extraMessage);\n  }\n\n  public static metadataGetFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1102, extraMessage);\n  }\n\n  public static metadataPostFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1103, extraMessage);\n  }\n\n  // TkeyData\n  public static tkeyStoreInvalid(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1201, extraMessage);\n  }\n\n  public static tkeyEncryptionFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1202, extraMessage);\n  }\n\n  public static tkeyDecryptionFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1203, extraMessage);\n  }\n\n  // Shares\n  public static privateKeyUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1301, extraMessage);\n  }\n\n  public static unableToReconstruct(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1302, extraMessage);\n  }\n\n  public static incorrectReconstruction(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1303, extraMessage);\n  }\n\n  public static encryptedShareStoreUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1306, extraMessage);\n  }\n\n  // Metadata locks\n  public static acquireLockFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1401, extraMessage);\n  }\n\n  public static releaseLockFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1402, extraMessage);\n  }\n\n  // Authmetadata\n  public static privKeyUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1501, extraMessage);\n  }\n\n  public static metadataPubKeyUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1502, extraMessage);\n  }\n\n  public static authMetadataGetUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1503, extraMessage);\n  }\n\n  public static authMetadataSetUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1504, extraMessage);\n  }\n}\nexport default CoreError;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/toConsumableArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","import { ecCurve, generatePrivateExcludingIndexes, Point, Polynomial, Share } from \"@tkey/common-types\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport CoreError from \"./errors\";\n\nconst generateEmptyBNArray = (length: number): BN[] => Array.from({ length }, () => new BN(0));\n\nconst denominator = (i: number, innerPoints: Array<Point>) => {\n  let result = new BN(1);\n  const xi = innerPoints[i].x;\n  for (let j = innerPoints.length - 1; j >= 0; j -= 1) {\n    if (i !== j) {\n      let tmp = new BN(xi);\n      tmp = tmp.sub(innerPoints[j].x);\n      tmp = tmp.umod(ecCurve.curve.n);\n      result = result.mul(tmp);\n      result = result.umod(ecCurve.curve.n);\n    }\n  }\n  return result;\n};\n\nconst interpolationPoly = (i: number, innerPoints: Array<Point>): BN[] => {\n  let coefficients = generateEmptyBNArray(innerPoints.length);\n  const d = denominator(i, innerPoints);\n  if (d.cmp(new BN(0)) === 0) {\n    throw CoreError.default(\"Denominator for interpolationPoly is 0\");\n  }\n  coefficients[0] = d.invm(ecCurve.curve.n);\n  for (let k = 0; k < innerPoints.length; k += 1) {\n    const newCoefficients = generateEmptyBNArray(innerPoints.length);\n    if (k !== i) {\n      let j: number;\n      if (k < i) {\n        j = k + 1;\n      } else {\n        j = k;\n      }\n      j -= 1;\n      for (; j >= 0; j -= 1) {\n        newCoefficients[j + 1] = newCoefficients[j + 1].add(coefficients[j]);\n        newCoefficients[j + 1] = newCoefficients[j + 1].umod(ecCurve.curve.n);\n        let tmp = new BN(innerPoints[k].x);\n        tmp = tmp.mul(coefficients[j]);\n        tmp = tmp.umod(ecCurve.curve.n);\n        newCoefficients[j] = newCoefficients[j].sub(tmp);\n        newCoefficients[j] = newCoefficients[j].umod(ecCurve.curve.n);\n      }\n      coefficients = newCoefficients;\n    }\n  }\n  return coefficients;\n};\n\nconst pointSort = (innerPoints: Point[]): Point[] => {\n  const pointArrClone = [...innerPoints];\n  pointArrClone.sort((a, b) => a.x.cmp(b.x));\n  return pointArrClone;\n};\n\nconst lagrange = (unsortedPoints: Point[]) => {\n  const sortedPoints = pointSort(unsortedPoints);\n  const polynomial = generateEmptyBNArray(sortedPoints.length);\n  for (let i = 0; i < sortedPoints.length; i += 1) {\n    const coefficients = interpolationPoly(i, sortedPoints);\n    for (let k = 0; k < sortedPoints.length; k += 1) {\n      let tmp = new BN(sortedPoints[i].y);\n      tmp = tmp.mul(coefficients[k]);\n      polynomial[k] = polynomial[k].add(tmp);\n      polynomial[k] = polynomial[k].umod(ecCurve.curve.n);\n    }\n  }\n  return new Polynomial(polynomial);\n};\n\nexport function lagrangeInterpolatePolynomial(points: Array<Point>): Polynomial {\n  return lagrange(points);\n}\n\nexport function lagrangeInterpolation(shares: BN[], nodeIndex: BN[]): BN {\n  if (shares.length !== nodeIndex.length) {\n    throw CoreError.default(\"shares not equal to nodeIndex length in lagrangeInterpolation\");\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(ecCurve.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(ecCurve.curve.n);\n        lower = lower.mul(temp).umod(ecCurve.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(ecCurve.curve.n);\n}\n\n// generateRandomPolynomial - determinisiticShares are assumed random\nexport function generateRandomPolynomial(degree: number, secret?: BN, deterministicShares?: Array<Share>): Polynomial {\n  let actualS = secret;\n  if (!secret) {\n    actualS = generatePrivateExcludingIndexes([new BN(0)]);\n  }\n  if (!deterministicShares) {\n    const poly = [actualS];\n    for (let i = 0; i < degree; i += 1) {\n      const share = generatePrivateExcludingIndexes(poly);\n      poly.push(share);\n    }\n    return new Polynomial(poly);\n  }\n  if (!Array.isArray(deterministicShares)) {\n    throw CoreError.default(\"deterministic shares in generateRandomPolynomial should be an array\");\n  }\n\n  if (deterministicShares.length > degree) {\n    throw CoreError.default(\"deterministicShares in generateRandomPolynomial should be less or equal than degree to ensure an element of randomness\");\n  }\n  const points = {};\n  deterministicShares.forEach((share) => {\n    points[share.shareIndex.toString(\"hex\")] = new Point(share.shareIndex, share.share);\n  });\n  for (let i = 0; i < degree - deterministicShares.length; i += 1) {\n    let shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    while (points[shareIndex.toString(\"hex\")] !== undefined) {\n      shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    }\n    points[shareIndex.toString(\"hex\")] = new Point(shareIndex, new BN(generatePrivate()));\n  }\n  points[\"0\"] = new Point(new BN(0), actualS);\n  return lagrangeInterpolatePolynomial(Object.values(points));\n}\n\n//  2 + 3x = y | secret for index 1 is 5 >>> g^5 is the commitment | now we have g^2, g^3 and 1, |\nexport function polyCommitmentEval(polyCommitments: Array<Point>, index: BN): Point {\n  // convert to base points, this is badly written, its the only way to access the point rn zzz TODO: refactor\n  const basePtPolyCommitments: Array<curve.base.BasePoint> = [];\n  for (let i = 0; i < polyCommitments.length; i += 1) {\n    const key = ecCurve.keyFromPublic({ x: polyCommitments[i].x.toString(\"hex\"), y: polyCommitments[i].y.toString(\"hex\") }, \"\");\n    basePtPolyCommitments.push(key.getPublic());\n  }\n  let shareCommitment = basePtPolyCommitments[0];\n  for (let i = 1; i < basePtPolyCommitments.length; i += 1) {\n    const factor = index.pow(new BN(i)).umod(ecCurve.n);\n    const e = basePtPolyCommitments[i].mul(factor);\n    shareCommitment = shareCommitment.add(e);\n  }\n  return new Point(shareCommitment.getX(), shareCommitment.getY());\n}\n","import {\n  decrypt,\n  ecCurve,\n  EncryptedMessage,\n  getPubKeyPoint,\n  IMetadata,\n  Point,\n  PolyIDAndShares,\n  Polynomial,\n  PolynomialID,\n  PublicPolynomial,\n  PublicPolynomialMap,\n  PublicShare,\n  PublicSharePolyIDShareIndexMap,\n  Share,\n  ShareDescriptionMap,\n  ShareMap,\n  ShareStore,\n  StringifiedType,\n  toPrivKeyECC,\n} from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\n\nimport CoreError from \"./errors\";\nimport { polyCommitmentEval } from \"./lagrangeInterpolatePolynomial\";\n\nclass Metadata implements IMetadata {\n  pubKey: Point;\n\n  publicPolynomials: PublicPolynomialMap;\n\n  publicShares: PublicSharePolyIDShareIndexMap;\n\n  // Tuple of PolyID and array of ShareIndexes\n  polyIDList: PolyIDAndShares[];\n\n  generalStore: {\n    [moduleName: string]: unknown;\n  };\n\n  tkeyStore: {\n    [moduleName: string]: unknown;\n  };\n\n  scopedStore: {\n    [moduleName: string]: unknown;\n  };\n\n  nonce: number;\n\n  constructor(input: Point) {\n    this.publicPolynomials = {};\n    this.publicShares = {};\n    this.generalStore = {};\n    this.tkeyStore = {};\n    this.scopedStore = {};\n    this.pubKey = input;\n    this.polyIDList = [];\n    this.nonce = 0;\n  }\n\n  static fromJSON(value: StringifiedType): Metadata {\n    const { pubKey, polyIDList, generalStore, tkeyStore, scopedStore, nonce } = value;\n    const point = Point.fromCompressedPub(pubKey);\n    const metadata = new Metadata(point);\n    const unserializedPolyIDList: PolyIDAndShares[] = [];\n\n    if (generalStore) metadata.generalStore = generalStore;\n    if (tkeyStore) metadata.tkeyStore = tkeyStore;\n    if (scopedStore) metadata.scopedStore = scopedStore;\n    if (nonce) metadata.nonce = nonce;\n\n    for (let i = 0; i < polyIDList.length; i += 1) {\n      const serializedPolyID: string = polyIDList[i];\n      const arrPolyID = serializedPolyID.split(\"|\");\n      const zeroIndex = arrPolyID.findIndex((v) => v === \"0x0\");\n      const firstHalf = arrPolyID.slice(0, zeroIndex);\n      const secondHalf = arrPolyID.slice(zeroIndex + 1, arrPolyID.length);\n      // for publicPolynomials\n      const pubPolyID = firstHalf.join(\"|\");\n      const pointCommitments = [];\n      firstHalf.forEach((compressedCommitment) => {\n        pointCommitments.push(Point.fromCompressedPub(compressedCommitment));\n      });\n      const publicPolynomial = new PublicPolynomial(pointCommitments);\n      metadata.publicPolynomials[pubPolyID] = publicPolynomial;\n\n      // for polyIDList\n      unserializedPolyIDList.push([pubPolyID, secondHalf]);\n    }\n\n    metadata.polyIDList = unserializedPolyIDList;\n    return metadata;\n  }\n\n  getShareIndexesForPolynomial(polyID: PolynomialID): Array<string> {\n    const matchingPolyIDs = this.polyIDList.filter((tuple) => tuple[0] === polyID);\n    if (matchingPolyIDs.length < 1) {\n      throw CoreError.default(\"there is no matching polyID\");\n    } else if (matchingPolyIDs.length > 1) {\n      throw CoreError.default(\"there is more than one matching polyID\");\n    }\n    return matchingPolyIDs[0][1];\n  }\n\n  getLatestPublicPolynomial(): PublicPolynomial {\n    return this.publicPolynomials[this.polyIDList[this.polyIDList.length - 1][0]];\n  }\n\n  addPublicShare(polynomialID: PolynomialID, publicShare: PublicShare): void {\n    if (!(polynomialID in this.publicShares)) {\n      this.publicShares[polynomialID] = {};\n    }\n    this.publicShares[polynomialID][publicShare.shareIndex.toString(\"hex\")] = publicShare;\n  }\n\n  // getPublicShare(polynomialID: PolynomialID, shareIndex: BN): PublicShare {\n\n  // }\n\n  setGeneralStoreDomain(key: string, obj: unknown): void {\n    this.generalStore[key] = obj;\n  }\n\n  getGeneralStoreDomain(key: string): unknown {\n    return this.generalStore[key];\n  }\n\n  deleteGeneralStoreDomain(key: string): void {\n    delete this.generalStore[key];\n  }\n\n  setTkeyStoreDomain(key: string, arr: unknown): void {\n    this.tkeyStore[key] = arr;\n  }\n\n  getTkeyStoreDomain(key: string): unknown {\n    return this.tkeyStore[key];\n  }\n\n  // appends shares and public polynomial to metadata.\n  // should represent a generation of share or edit of threshold\n  addFromPolynomialAndShares(polynomial: Polynomial, shares: Share[] | ShareMap): void {\n    const publicPolynomial = polynomial.getPublicPolynomial();\n    const polyID = publicPolynomial.getPolynomialID();\n    this.publicPolynomials[polyID] = publicPolynomial;\n\n    const shareIndexArr = [];\n    if (Array.isArray(shares)) {\n      for (let i = 0; i < shares.length; i += 1) {\n        this.addPublicShare(publicPolynomial.getPolynomialID(), shares[i].getPublicShare());\n        shareIndexArr.push(shares[i].shareIndex.toString(\"hex\"));\n      }\n    } else {\n      for (const k in shares) {\n        if (Object.prototype.hasOwnProperty.call(shares, k)) {\n          this.addPublicShare(publicPolynomial.getPolynomialID(), shares[k].getPublicShare());\n          shareIndexArr.push(shares[k].shareIndex.toString(\"hex\"));\n        }\n      }\n    }\n    this.polyIDList.push([polyID, shareIndexArr]);\n  }\n\n  setScopedStore(domain: string, data: unknown): void {\n    this.scopedStore[domain] = data;\n  }\n\n  async getEncryptedShare(shareStore: ShareStore): Promise<ShareStore> {\n    const pubShare = shareStore.share.getPublicShare();\n    const encryptedShareStore = this.scopedStore.encryptedShares;\n    if (!encryptedShareStore) {\n      throw CoreError.encryptedShareStoreUnavailable(`${shareStore}`);\n    }\n    const encryptedShare = encryptedShareStore[pubShare.shareCommitment.x.toString(\"hex\")];\n    if (!encryptedShare) {\n      throw CoreError.encryptedShareStoreUnavailable(`${shareStore}`);\n    }\n    const rawDecrypted = await decrypt(toPrivKeyECC(shareStore.share.share), encryptedShare as EncryptedMessage);\n    return ShareStore.fromJSON(JSON.parse(rawDecrypted.toString()));\n  }\n\n  getShareDescription(): ShareDescriptionMap {\n    return this.getGeneralStoreDomain(\"shareDescriptions\") as ShareDescriptionMap;\n  }\n\n  addShareDescription(shareIndex: string, description: string): void {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\") || {};\n    if (currentSD[shareIndex]) {\n      currentSD[shareIndex].push(description);\n    } else {\n      currentSD[shareIndex] = [description];\n    }\n    this.setGeneralStoreDomain(\"shareDescriptions\", currentSD);\n  }\n\n  deleteShareDescription(shareIndex: string, description: string): void {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\");\n    const index = currentSD[shareIndex].indexOf(description);\n    if (index > -1) {\n      currentSD[shareIndex].splice(index, 1);\n    } else {\n      throw CoreError.default(`No share description found for the given shareIndex: ${shareIndex} \n        and description: ${description}`);\n    }\n  }\n\n  updateShareDescription(shareIndex: string, oldDescription: string, newDescription: string): void {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\");\n    const index = currentSD[shareIndex].indexOf(oldDescription);\n    if (index > -1) {\n      currentSD[shareIndex][index] = newDescription;\n    } else {\n      throw CoreError.default(`No share description found for the given shareIndex:\n        ${shareIndex} and description: ${oldDescription}`);\n    }\n  }\n\n  shareToShareStore(share: BN): ShareStore {\n    const pubkey = getPubKeyPoint(share);\n    let returnShare: ShareStore;\n\n    for (let i = this.polyIDList.length - 1; i >= 0; i -= 1) {\n      const el = this.polyIDList[i][0];\n\n      for (let t = 0; t < this.polyIDList[i][1].length; t += 1) {\n        const shareIndex = this.polyIDList[i][1][t];\n        // find pubshare in cache if its there\n        let pubShare: PublicShare;\n        if (this.publicShares[el]) {\n          if (this.publicShares[el][shareIndex]) {\n            pubShare = this.publicShares[el][shareIndex];\n          }\n        }\n\n        // if not reconstruct\n        if (!pubShare) {\n          pubShare = new PublicShare(shareIndex, polyCommitmentEval(this.publicPolynomials[el].polynomialCommitments, new BN(shareIndex, \"hex\")));\n        }\n        if (pubShare.shareCommitment.x.eq(pubkey.x) && pubShare.shareCommitment.y.eq(pubkey.y)) {\n          const tempShare = new Share(pubShare.shareIndex, share);\n          return new ShareStore(tempShare, el);\n        }\n      }\n    }\n    if (!returnShare) {\n      throw CoreError.fromCode(1307);\n    }\n    return returnShare;\n  }\n\n  clone(): Metadata {\n    return Metadata.fromJSON(JSON.parse(stringify(this)));\n  }\n\n  toJSON(): StringifiedType {\n    // squash data to serialized polyID according to spec\n    const serializedPolyIDList = [];\n    for (let i = 0; i < this.polyIDList.length; i += 1) {\n      const polyID = this.polyIDList[i][0];\n      const shareIndexes = this.polyIDList[i][1];\n      const sortedShareIndexes = shareIndexes.sort((a: string, b: string) => new BN(a, \"hex\").cmp(new BN(b, \"hex\")));\n      const serializedPolyID = polyID\n        .split(`|`)\n        .concat(\"0x0\")\n        .concat(...sortedShareIndexes)\n        .join(\"|\");\n      serializedPolyIDList.push(serializedPolyID);\n    }\n\n    return {\n      pubKey: this.pubKey.encode(\"elliptic-compressed\", { ec: ecCurve }).toString(),\n      polyIDList: serializedPolyIDList,\n      scopedStore: this.scopedStore,\n      generalStore: this.generalStore,\n      tkeyStore: this.tkeyStore,\n      nonce: this.nonce,\n    };\n  }\n}\n\nexport default Metadata;\n","import { ecCurve, IAuthMetadata, StringifiedType, stripHexPrefix, toPrivKeyEC } from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\nimport { keccak256 } from \"web3-utils\";\n\nimport CoreError from \"./errors\";\nimport Metadata from \"./metadata\";\n\nclass AuthMetadata implements IAuthMetadata {\n  metadata: Metadata;\n\n  privKey: BN;\n\n  constructor(metadata: Metadata, privKey?: BN) {\n    this.metadata = metadata;\n    this.privKey = privKey;\n  }\n\n  static fromJSON(value: StringifiedType): AuthMetadata {\n    const { data, sig } = value;\n\n    const m = Metadata.fromJSON(data);\n    if (!m.pubKey) throw CoreError.metadataPubKeyUnavailable();\n\n    const pubK = ecCurve.keyFromPublic({ x: m.pubKey.x.toString(\"hex\", 64), y: m.pubKey.y.toString(\"hex\", 64) }, \"hex\");\n    if (!pubK.verify(stripHexPrefix(keccak256(stringify(data))), sig)) {\n      throw CoreError.default(\"Signature not valid for returning metadata\");\n    }\n    return new AuthMetadata(m);\n  }\n\n  toJSON(): StringifiedType {\n    const data = this.metadata;\n\n    if (!this.privKey) throw CoreError.privKeyUnavailable();\n    const k = toPrivKeyEC(this.privKey);\n    const sig = k.sign(stripHexPrefix(keccak256(stringify(data))));\n\n    return {\n      data,\n      sig: sig.toDER(\"hex\"),\n    };\n  }\n}\n\nexport default AuthMetadata;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","import {\n  BNString,\n  CatchupToLatestShareResult,\n  decrypt,\n  DeleteShareResult,\n  encrypt,\n  EncryptedMessage,\n  FromJSONConstructor,\n  GenerateNewShareResult,\n  generatePrivateExcludingIndexes,\n  getPubKeyECC,\n  getPubKeyPoint,\n  IMessageMetadata,\n  IMetadata,\n  InitializeNewKeyResult,\n  IServiceProvider,\n  IStorageLayer,\n  ITKey,\n  ITKeyApi,\n  KEY_NOT_FOUND,\n  KeyDetails,\n  LocalMetadataTransitions,\n  LocalTransitionData,\n  LocalTransitionShares,\n  ModuleMap,\n  ONE_KEY_DELETE_NONCE,\n  Point,\n  Polynomial,\n  PolynomialID,\n  prettyPrintError,\n  ReconstructedKeyResult,\n  ReconstructKeyMiddlewareMap,\n  RefreshMiddlewareMap,\n  RefreshSharesResult,\n  Share,\n  SHARE_DELETED,\n  ShareSerializationMiddleware,\n  ShareStore,\n  ShareStoreMap,\n  ShareStorePolyIDShareIndexMap,\n  StringifiedType,\n  TKeyArgs,\n  TkeyStoreItemType,\n  toPrivKeyECC,\n} from \"@tkey/common-types\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\n\nimport AuthMetadata from \"./authMetadata\";\nimport CoreError from \"./errors\";\nimport { generateRandomPolynomial, lagrangeInterpolatePolynomial, lagrangeInterpolation } from \"./lagrangeInterpolatePolynomial\";\nimport Metadata from \"./metadata\";\n\n// TODO: handle errors for get and set with retries\n\nclass ThresholdKey implements ITKey {\n  modules: ModuleMap;\n\n  enableLogging: boolean;\n\n  serviceProvider: IServiceProvider;\n\n  storageLayer: IStorageLayer;\n\n  shares: ShareStorePolyIDShareIndexMap;\n\n  privKey: BN;\n\n  lastFetchedCloudMetadata: Metadata;\n\n  metadata: Metadata;\n\n  manualSync: boolean;\n\n  _localMetadataTransitions: LocalMetadataTransitions;\n\n  _refreshMiddleware: RefreshMiddlewareMap;\n\n  _reconstructKeyMiddleware: ReconstructKeyMiddlewareMap;\n\n  _shareSerializationMiddleware: ShareSerializationMiddleware;\n\n  storeDeviceShare: (deviceShareStore: ShareStore, customDeviceInfo?: StringifiedType) => Promise<void>;\n\n  haveWriteMetadataLock: string;\n\n  constructor(args?: TKeyArgs) {\n    const { enableLogging = false, modules = {}, serviceProvider, storageLayer, manualSync = false } = args || {};\n    this.enableLogging = enableLogging;\n    this.serviceProvider = serviceProvider;\n    this.storageLayer = storageLayer;\n    this.modules = modules;\n    this.shares = {};\n    this.privKey = undefined;\n    this.manualSync = manualSync;\n    this._refreshMiddleware = {};\n    this._reconstructKeyMiddleware = {};\n    this._shareSerializationMiddleware = undefined;\n    this.storeDeviceShare = undefined;\n    this._localMetadataTransitions = [[], []];\n    this.setModuleReferences(); // Providing ITKeyApi access to modules\n    this.haveWriteMetadataLock = \"\";\n  }\n\n  static async fromJSON(value: StringifiedType, args: TKeyArgs): Promise<ThresholdKey> {\n    const { enableLogging, privKey, metadata, shares, _localMetadataTransitions, manualSync, lastFetchedCloudMetadata } = value;\n    const { storageLayer, serviceProvider, modules } = args;\n\n    const tb = new ThresholdKey({\n      enableLogging,\n      storageLayer,\n      serviceProvider,\n      modules,\n      manualSync,\n    });\n    if (privKey) tb.privKey = new BN(privKey, \"hex\");\n\n    for (const key in shares) {\n      if (Object.prototype.hasOwnProperty.call(shares, key)) {\n        const shareStoreMapElement = shares[key];\n        for (const shareElementKey in shareStoreMapElement) {\n          if (Object.prototype.hasOwnProperty.call(shareStoreMapElement, shareElementKey)) {\n            const shareStore = shareStoreMapElement[shareElementKey];\n            shareStoreMapElement[shareElementKey] = ShareStore.fromJSON(shareStore);\n          }\n        }\n      }\n    }\n    tb.shares = shares;\n\n    // switch to deserialize local metadata transition based on Object.keys() of authMetadata, ShareStore's and, IMessageMetadata\n    const AuthMetadataKeys = Object.keys(JSON.parse(stringify(new AuthMetadata(new Metadata(new Point(\"0\", \"0\")), new BN(\"0\", \"hex\")))));\n    const ShareStoreKeys = Object.keys(JSON.parse(stringify(new ShareStore(new Share(\"0\", \"0\"), \"\"))));\n    const sampleMessageMetadata: IMessageMetadata = { message: \"Sample message\", dateAdded: Date.now() };\n    const MessageMetadataKeys = Object.keys(sampleMessageMetadata);\n\n    const localTransitionShares: LocalTransitionShares = [];\n    const localTransitionData: LocalTransitionData = [];\n\n    _localMetadataTransitions[0].forEach((x, index) => {\n      if (x) {\n        localTransitionShares.push(new BN(x, \"hex\"));\n      } else {\n        localTransitionShares.push(undefined);\n      }\n\n      const keys = Object.keys(_localMetadataTransitions[1][index]);\n      if (keys.length === AuthMetadataKeys.length && keys.every((val) => AuthMetadataKeys.includes(val))) {\n        const tempAuth = AuthMetadata.fromJSON(_localMetadataTransitions[1][index]);\n        tempAuth.privKey = privKey;\n        localTransitionData.push(tempAuth);\n      } else if (keys.length === ShareStoreKeys.length && keys.every((val) => ShareStoreKeys.includes(val))) {\n        localTransitionData.push(ShareStore.fromJSON(_localMetadataTransitions[1][index]));\n      } else if (keys.length === MessageMetadataKeys.length && keys.every((val) => MessageMetadataKeys.includes(val))) {\n        localTransitionData.push(_localMetadataTransitions[1][index] as IMessageMetadata);\n      } else {\n        throw CoreError.default(\"fromJSON failed. Could not deserialise _localMetadataTransitions\");\n      }\n    });\n\n    if (metadata || lastFetchedCloudMetadata) {\n      let tempMetadata: Metadata;\n      let tempCloud: Metadata;\n      let shareToUseForSerialization: ShareStore;\n\n      // if service provider key is missing, we should initialize with one of the existing shares\n      // TODO: fix for deleted share\n      if (tb.serviceProvider.postboxKey.toString(\"hex\") === \"0\") {\n        const latestPolyIDOnCloud = Metadata.fromJSON(lastFetchedCloudMetadata).getLatestPublicPolynomial().getPolynomialID();\n        const shareIndexesExistInSDK = Object.keys(shares[latestPolyIDOnCloud]);\n        const randomIndex = shareIndexesExistInSDK[Math.floor(Math.random() * (shareIndexesExistInSDK.length - 1))];\n        if (shareIndexesExistInSDK.length >= 1) {\n          shareToUseForSerialization = shares[latestPolyIDOnCloud][randomIndex];\n        }\n      }\n      if (metadata) tempMetadata = Metadata.fromJSON(metadata);\n      if (lastFetchedCloudMetadata) tempCloud = Metadata.fromJSON(lastFetchedCloudMetadata);\n      await tb.initialize({\n        neverInitializeNewKey: true,\n        transitionMetadata: tempMetadata,\n        previouslyFetchedCloudMetadata: tempCloud,\n        previousLocalMetadataTransitions: [localTransitionShares, localTransitionData],\n        withShare: shareToUseForSerialization,\n      });\n    } else {\n      await tb.initialize({ neverInitializeNewKey: true });\n    }\n    return tb;\n  }\n\n  getStorageLayer(): IStorageLayer {\n    return this.storageLayer;\n  }\n\n  getMetadata(): IMetadata {\n    if (typeof this.metadata !== \"undefined\") {\n      return this.metadata;\n    }\n\n    throw CoreError.metadataUndefined();\n  }\n\n  async initialize(params?: {\n    withShare?: ShareStore;\n    importKey?: BN;\n    neverInitializeNewKey?: boolean;\n    transitionMetadata?: Metadata;\n    previouslyFetchedCloudMetadata?: Metadata;\n    previousLocalMetadataTransitions?: LocalMetadataTransitions;\n    delete1OutOf1?: boolean;\n  }): Promise<KeyDetails> {\n    // setup initial params/states\n    const p = params || {};\n\n    if (p.delete1OutOf1 && !this.manualSync) throw CoreError.delete1OutOf1OnlyManualSync();\n\n    const { withShare, importKey, neverInitializeNewKey, transitionMetadata, previouslyFetchedCloudMetadata, previousLocalMetadataTransitions } = p;\n\n    const previousLocalMetadataTransitionsExists =\n      previousLocalMetadataTransitions && previousLocalMetadataTransitions[0].length > 0 && previousLocalMetadataTransitions[1].length > 0;\n    const reinitializing = transitionMetadata && previousLocalMetadataTransitionsExists; // are we reinitializing the SDK?\n    // in the case we're reinitializing whilst newKeyAssign has not been synced\n    const reinitializingWithNewKeyAssign = reinitializing && previouslyFetchedCloudMetadata === undefined;\n\n    let shareStore: ShareStore;\n    if (withShare instanceof ShareStore) {\n      shareStore = withShare;\n    } else if (typeof withShare === \"object\") {\n      shareStore = ShareStore.fromJSON(withShare);\n    } else if (!withShare) {\n      // default to use service provider\n      // first we see if a share has been kept for us\n      const spIncludeLocalMetadataTransitions = reinitializingWithNewKeyAssign;\n      const spLocalMetadataTransitions = reinitializingWithNewKeyAssign ? previousLocalMetadataTransitions : undefined;\n      const rawServiceProviderShare = await this.getGenericMetadataWithTransitionStates({\n        serviceProvider: this.serviceProvider,\n        includeLocalMetadataTransitions: spIncludeLocalMetadataTransitions,\n        _localMetadataTransitions: spLocalMetadataTransitions,\n        fromJSONConstructor: {\n          fromJSON(val: StringifiedType) {\n            return val;\n          },\n        },\n      });\n      const noKeyFound: { message?: string } = rawServiceProviderShare as { message?: string };\n      if (noKeyFound.message === KEY_NOT_FOUND) {\n        if (neverInitializeNewKey) {\n          throw CoreError.default(\"key has not been generated yet\");\n        }\n        // no metadata set, assumes new user\n        await this._initializeNewKey({ initializeModules: true, importedKey: importKey, delete1OutOf1: p.delete1OutOf1 });\n        return this.getKeyDetails();\n      }\n      // else we continue with catching up share and metadata\n      shareStore = ShareStore.fromJSON(rawServiceProviderShare);\n    } else {\n      throw CoreError.default(\"Input is not supported\");\n    }\n\n    // We determine the latest metadata on the SDK and if there has been\n    // needed transitions to include\n    let currentMetadata: Metadata;\n    let latestCloudMetadata: Metadata;\n    // we fetch the latest metadata for the account from the share\n    let latestShareDetails: CatchupToLatestShareResult;\n    try {\n      latestShareDetails = await this.catchupToLatestShare({ shareStore });\n    } catch (err) {\n      // check if error is not the undefined error\n      // if so we don't throw immediately incase there is valid transition metadata\n      const noMetadataExistsForShare = err.code === 1503;\n      if (!noMetadataExistsForShare || !reinitializing) {\n        throw err;\n      }\n    }\n\n    // lets check if the cloud metadata has been updated or not from previously if we are reinitializing\n    if (reinitializing && !reinitializingWithNewKeyAssign) {\n      if (previouslyFetchedCloudMetadata.nonce < latestShareDetails.shareMetadata.nonce) {\n        throw CoreError.fromCode(1104);\n      } else if (previouslyFetchedCloudMetadata.nonce > latestShareDetails.shareMetadata.nonce) {\n        throw CoreError.fromCode(1105);\n      }\n      latestCloudMetadata = previouslyFetchedCloudMetadata;\n    } else {\n      latestCloudMetadata = latestShareDetails ? latestShareDetails.shareMetadata.clone() : undefined;\n    }\n\n    // If we've been provided with transition metadata we use that as the current metadata instead\n    // as we want to maintain state before and after serialization.\n    // (Given that the checks for cloud metadata pass)\n    if (reinitializing) {\n      currentMetadata = transitionMetadata;\n      this._localMetadataTransitions = previousLocalMetadataTransitions;\n    } else {\n      currentMetadata = latestShareDetails.shareMetadata;\n    }\n\n    this.lastFetchedCloudMetadata = latestCloudMetadata;\n    this.metadata = currentMetadata;\n    const latestShare = latestShareDetails ? latestShareDetails.latestShare : shareStore;\n    this.inputShareStore(latestShare);\n\n    // initialize modules\n    await this.initializeModules();\n\n    return this.getKeyDetails();\n  }\n\n  /**\n   * catchupToLatestShare recursively loops fetches metadata of the provided share and checks if there is an encrypted share for it.\n   * @param shareStore - share to start of with\n   * @param polyID - if specified, polyID to refresh to if it exists\n   */\n  async catchupToLatestShare(params: {\n    shareStore: ShareStore;\n    polyID?: PolynomialID;\n    includeLocalMetadataTransitions?: boolean;\n  }): Promise<CatchupToLatestShareResult> {\n    const { shareStore, polyID, includeLocalMetadataTransitions } = params;\n    let shareMetadata: Metadata;\n    try {\n      shareMetadata = await this.getAuthMetadata({ privKey: shareStore.share.share, includeLocalMetadataTransitions });\n    } catch (err) {\n      // delete share error\n      if ((err as CoreError) && err.code === 1308) {\n        throw err;\n      }\n      throw CoreError.authMetadataGetUnavailable(`, ${prettyPrintError(err)}`);\n    }\n\n    try {\n      // if matches specified polyID return it\n      if (polyID) {\n        if (shareStore.polynomialID === polyID) {\n          return { latestShare: shareStore, shareMetadata };\n        }\n      }\n      const nextShare = await shareMetadata.getEncryptedShare(shareStore);\n      return await this.catchupToLatestShare({ shareStore: nextShare, polyID, includeLocalMetadataTransitions });\n    } catch (err) {\n      // delete share error\n      if ((err as CoreError) && err.code === 1308) {\n        throw err;\n      }\n      return { latestShare: shareStore, shareMetadata };\n    }\n  }\n\n  async reconstructKey(_reconstructKeyMiddleware = true): Promise<ReconstructedKeyResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const requiredThreshold = pubPoly.getThreshold();\n    const pubPolyID = pubPoly.getPolynomialID();\n\n    // check if we have enough shares to meet threshold\n    let sharesLeft = requiredThreshold;\n    // we don't just check the latest poly but\n    // we check if the shares on previous polynomials in our stores have the share indexes we require\n    const fullShareList = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    const shareIndexesRequired = {};\n    for (let i = 0; i < fullShareList.length; i += 1) {\n      shareIndexesRequired[fullShareList[i]] = true;\n    }\n    const sharesToInput = [];\n    for (let z = this.metadata.polyIDList.length - 1; z >= 0 && sharesLeft > 0; z -= 1) {\n      const sharesForPoly = this.shares[this.metadata.polyIDList[z][0]];\n      if (sharesForPoly) {\n        const shareIndexesForPoly = Object.keys(sharesForPoly);\n        for (let k = 0; k < shareIndexesForPoly.length && sharesLeft > 0; k += 1) {\n          if (shareIndexesForPoly[k] in shareIndexesRequired) {\n            const currentShareForPoly = sharesForPoly[shareIndexesForPoly[k]];\n            if (currentShareForPoly.polynomialID === pubPolyID) {\n              sharesToInput.push(currentShareForPoly);\n            } else {\n              const latestShareRes = await this.catchupToLatestShare({\n                shareStore: currentShareForPoly,\n                polyID: pubPolyID,\n                includeLocalMetadataTransitions: true,\n              });\n              if (latestShareRes.latestShare.polynomialID === pubPolyID) {\n                sharesToInput.push(latestShareRes.latestShare);\n              } else {\n                throw new CoreError(1304, \"Share found in unexpected polynomial\"); // Share found in unexpected polynomial\n              }\n            }\n            delete shareIndexesRequired[shareIndexesForPoly[k]];\n            sharesLeft -= 1;\n          }\n        }\n      }\n    }\n\n    // Input shares to ensure atomicity\n    sharesToInput.forEach((share) => {\n      this.inputShareStore(share);\n    });\n\n    if (sharesLeft > 0) {\n      throw CoreError.unableToReconstruct(` require ${requiredThreshold} but have ${requiredThreshold - sharesLeft}`);\n    }\n\n    const polyShares = Object.keys(this.shares[pubPolyID]);\n    const shareArr = [];\n    const shareIndexArr = [];\n    for (let i = 0; i < requiredThreshold; i += 1) {\n      shareArr.push(this.shares[pubPolyID][polyShares[i]].share.share);\n      shareIndexArr.push(this.shares[pubPolyID][polyShares[i]].share.shareIndex);\n    }\n    const privKey = lagrangeInterpolation(shareArr, shareIndexArr);\n    // check that priv key regenerated is correct\n    const reconstructedPubKey = getPubKeyPoint(privKey);\n    if (this.metadata.pubKey.x.cmp(reconstructedPubKey.x) !== 0) {\n      throw CoreError.incorrectReconstruction();\n    }\n    this._setKey(privKey);\n\n    const returnObject = {\n      privKey,\n      allKeys: [privKey],\n    };\n\n    if (_reconstructKeyMiddleware && Object.keys(this._reconstructKeyMiddleware).length > 0) {\n      // retireve/reconstruct extra keys that live on metadata\n      await Promise.all(\n        Object.keys(this._reconstructKeyMiddleware).map(async (x) => {\n          if (Object.prototype.hasOwnProperty.call(this._reconstructKeyMiddleware, x)) {\n            const extraKeys = await this._reconstructKeyMiddleware[x]();\n            returnObject[x] = extraKeys;\n            returnObject.allKeys.push(...extraKeys);\n          }\n        })\n      );\n    }\n    return returnObject;\n  }\n\n  reconstructLatestPoly(): Polynomial {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const threshold = pubPoly.getThreshold();\n\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[pubPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares to reconstruct poly\");\n    }\n    if (new Set(sharesForExistingPoly).size !== sharesForExistingPoly.length) {\n      throw CoreError.default(\"share indexes should be unique\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[pubPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    return lagrangeInterpolatePolynomial(pointsArr);\n  }\n\n  async deleteShare(shareIndex: BNString): Promise<DeleteShareResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const shareIndexToDelete = new BN(shareIndex, \"hex\");\n    const shareToDelete = this.outputShareStore(shareIndexToDelete);\n    if (shareIndexToDelete.cmp(new BN(\"1\", \"hex\")) === 0) {\n      throw new CoreError(1001, \"Unable to delete service provider share\");\n    }\n\n    // Get existing shares\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const newShareIndexes = [];\n    existingShareIndexes.forEach((el) => {\n      const bn = new BN(el, \"hex\");\n      if (bn.cmp(shareIndexToDelete) !== 0) {\n        newShareIndexes.push(bn.toString(\"hex\"));\n      }\n    });\n\n    // Update shares\n    if (existingShareIndexes.length === newShareIndexes.length) {\n      throw CoreError.default(\"Share index does not exist in latest polynomial\");\n    } else if (newShareIndexes.length < pubPoly.getThreshold()) {\n      throw CoreError.default(`Minimum ${pubPoly.getThreshold()} shares are required for tkey. Unable to delete share`);\n    }\n    const results = await this._refreshShares(pubPoly.getThreshold(), [...newShareIndexes], previousPolyID);\n    const newShareStores = results.shareStores;\n    await this.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [shareToDelete.share.share] });\n    return { newShareStores };\n  }\n\n  async generateNewShare(): Promise<GenerateNewShareResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const existingShareIndexesBN = existingShareIndexes.map((el) => new BN(el, \"hex\"));\n    const newShareIndex = new BN(generatePrivateExcludingIndexes(existingShareIndexesBN));\n\n    const results = await this._refreshShares(pubPoly.getThreshold(), [...existingShareIndexes, newShareIndex.toString(\"hex\")], previousPolyID);\n    const newShareStores = results.shareStores;\n\n    return { newShareStores, newShareIndex };\n  }\n\n  async _refreshShares(threshold: number, newShareIndexes: string[], previousPolyID: PolynomialID): Promise<RefreshSharesResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (threshold > newShareIndexes.length) {\n      throw CoreError.default(`threshold should not be greater than share indexes. ${threshold} > ${newShareIndexes.length}`);\n    }\n\n    // update metadata nonce\n    this.metadata.nonce += 1;\n\n    const poly = generateRandomPolynomial(threshold - 1, this.privKey);\n    const shares = poly.generateShares(newShareIndexes);\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[previousPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares for polynomial reconstruction\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[previousPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    const oldPoly = lagrangeInterpolatePolynomial(pointsArr);\n\n    const shareIndexesNeedingEncryption: string[] = [];\n    for (let index = 0; index < existingShareIndexes.length; index += 1) {\n      const shareIndexHex = existingShareIndexes[index];\n      // define shares that need encryption/relaying\n      if (newShareIndexes.includes(shareIndexHex)) {\n        shareIndexesNeedingEncryption.push(shareIndexHex);\n      }\n    }\n\n    // add metadata new poly to metadata\n    this.metadata.addFromPolynomialAndShares(poly, shares);\n\n    // change to share stores for public storing\n    const oldShareStores = {};\n    const newShareStores = {};\n    const polyID = poly.getPolynomialID();\n    newShareIndexes.forEach((shareIndexHex) => {\n      newShareStores[shareIndexHex] = new ShareStore(shares[shareIndexHex], polyID);\n    });\n\n    // evaluate oldPoly for old shares and set new metadata with encrypted share for new polynomial\n\n    const m = this.metadata.clone();\n    const newScopedStore = {};\n    const sharesToPush = await Promise.all(\n      shareIndexesNeedingEncryption.map(async (shareIndex) => {\n        const oldShare = oldPoly.polyEval(new BN(shareIndex, \"hex\"));\n        const encryptedShare = await encrypt(getPubKeyECC(oldShare), Buffer.from(JSON.stringify(newShareStores[shareIndex])));\n        newScopedStore[getPubKeyPoint(oldShare).x.toString(\"hex\")] = encryptedShare;\n        oldShareStores[shareIndex] = new ShareStore(new Share(shareIndex, oldShare), previousPolyID);\n        return oldShare;\n      })\n    );\n    m.setScopedStore(\"encryptedShares\", newScopedStore);\n    const metadataToPush = Array(sharesToPush.length).fill(m);\n\n    // run refreshShare middleware\n    // If a shareIndex is left out during refresh shares, we assume that it being explicitly deleted.\n    for (const moduleName in this._refreshMiddleware) {\n      if (Object.prototype.hasOwnProperty.call(this._refreshMiddleware, moduleName)) {\n        const adjustedGeneralStore = this._refreshMiddleware[moduleName](\n          this.metadata.getGeneralStoreDomain(moduleName),\n          oldShareStores,\n          newShareStores\n        );\n        if (!adjustedGeneralStore) this.metadata.deleteGeneralStoreDomain(moduleName);\n        else this.metadata.setGeneralStoreDomain(moduleName, adjustedGeneralStore);\n      }\n    }\n\n    const newShareMetadataToPush = [];\n    const newShareStoreSharesToPush = newShareIndexes.map((shareIndex) => {\n      const me = this.metadata.clone();\n      newShareMetadataToPush.push(me);\n      return newShareStores[shareIndex].share.share;\n    });\n\n    const AuthMetadatas = this.generateAuthMetadata({ input: [...metadataToPush, ...newShareMetadataToPush] });\n\n    // Combine Authmetadata and service provider ShareStore\n    await this.addLocalMetadataTransitions({\n      input: [...AuthMetadatas, newShareStores[\"1\"]],\n      privKey: [...sharesToPush, ...newShareStoreSharesToPush, undefined],\n    });\n\n    // update this.shares with these new shares\n    for (let index = 0; index < newShareIndexes.length; index += 1) {\n      const shareIndex = newShareIndexes[index];\n      this.inputShareStore(newShareStores[shareIndex]);\n    }\n    // await this.releaseWriteMetadataLock();\n    return { shareStores: newShareStores };\n  }\n\n  async _initializeNewKey({\n    determinedShare,\n    initializeModules,\n    importedKey,\n    delete1OutOf1,\n  }: {\n    determinedShare?: BN;\n    initializeModules?: boolean;\n    importedKey?: BN;\n    delete1OutOf1?: boolean;\n  } = {}): Promise<InitializeNewKeyResult> {\n    if (!importedKey) {\n      const tmpPriv = generatePrivate();\n      this._setKey(new BN(tmpPriv));\n    } else {\n      this._setKey(new BN(importedKey));\n    }\n\n    // create a random poly and respective shares\n    // 1 is defined as the serviceProvider share\n    // 0 is for tKey\n    const shareIndexForDeviceStorage = generatePrivateExcludingIndexes([new BN(1), new BN(0)]);\n\n    const shareIndexes = [new BN(1), shareIndexForDeviceStorage];\n    let poly: Polynomial;\n    if (determinedShare) {\n      const shareIndexForDeterminedShare = generatePrivateExcludingIndexes([new BN(1), new BN(0)]);\n      poly = generateRandomPolynomial(1, this.privKey, [new Share(shareIndexForDeterminedShare, determinedShare)]);\n      shareIndexes.push(shareIndexForDeterminedShare);\n    } else {\n      poly = generateRandomPolynomial(1, this.privKey);\n    }\n    const shares = poly.generateShares(shareIndexes);\n\n    // create metadata to be stored\n    const metadata = new Metadata(getPubKeyPoint(this.privKey));\n    metadata.addFromPolynomialAndShares(poly, shares);\n    const serviceProviderShare = shares[shareIndexes[0].toString(\"hex\")];\n    const shareStore = new ShareStore(serviceProviderShare, poly.getPolynomialID());\n    this.metadata = metadata;\n\n    // initialize modules\n    if (initializeModules) {\n      await this.initializeModules();\n    }\n\n    const metadataToPush = [];\n    const sharesToPush = shareIndexes.map((shareIndex) => {\n      metadataToPush.push(this.metadata);\n      return shares[shareIndex.toString(\"hex\")].share;\n    });\n\n    const authMetadatas = this.generateAuthMetadata({ input: metadataToPush });\n\n    // because this is the first time we're setting metadata there is no need to acquire a lock\n    // acquireLock: false. Force push\n    await this.addLocalMetadataTransitions({ input: [...authMetadatas, shareStore], privKey: [...sharesToPush, undefined] });\n    if (delete1OutOf1) {\n      await this.addLocalMetadataTransitions({ input: [{ message: ONE_KEY_DELETE_NONCE }], privKey: [this.serviceProvider.postboxKey] });\n    }\n\n    // store metadata on metadata respective to shares\n    for (let index = 0; index < shareIndexes.length; index += 1) {\n      const shareIndex = shareIndexes[index];\n      // also add into our share store\n      this.inputShareStore(new ShareStore(shares[shareIndex.toString(\"hex\")], poly.getPolynomialID()));\n    }\n\n    if (this.storeDeviceShare) {\n      await this.storeDeviceShare(new ShareStore(shares[shareIndexes[1].toString(\"hex\")], poly.getPolynomialID()));\n    }\n\n    const result = {\n      privKey: this.privKey,\n      deviceShare: new ShareStore(shares[shareIndexes[1].toString(\"hex\")], poly.getPolynomialID()),\n      userShare: undefined,\n    };\n    if (determinedShare) {\n      result.userShare = new ShareStore(shares[shareIndexes[2].toString(\"hex\")], poly.getPolynomialID());\n    }\n    return result;\n  }\n\n  async addLocalMetadataTransitions(params: {\n    input: LocalTransitionData;\n    serviceProvider?: IServiceProvider;\n    privKey?: BN[];\n    acquireLock?: boolean;\n  }): Promise<void> {\n    const { privKey, input } = params;\n    this._localMetadataTransitions[0] = [...this._localMetadataTransitions[0], ...privKey];\n    this._localMetadataTransitions[1] = [...this._localMetadataTransitions[1], ...input];\n    if (!this.manualSync) await this.syncLocalMetadataTransitions();\n  }\n\n  async syncLocalMetadataTransitions(): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!(Array.isArray(this._localMetadataTransitions[0]) && this._localMetadataTransitions[0].length > 0)) return;\n\n    // get lock\n    let acquiredLock = false;\n    if (this.lastFetchedCloudMetadata) {\n      await this.acquireWriteMetadataLock();\n      acquiredLock = true;\n    }\n    try {\n      await this.storageLayer.setMetadataStream({\n        input: this._localMetadataTransitions[1],\n        privKey: this._localMetadataTransitions[0],\n        serviceProvider: this.serviceProvider,\n      });\n    } catch (error) {\n      throw CoreError.metadataPostFailed(prettyPrintError(error));\n    }\n\n    this._localMetadataTransitions = [[], []];\n    this.lastFetchedCloudMetadata = this.metadata.clone();\n    // release lock\n    if (acquiredLock) await this.releaseWriteMetadataLock();\n  }\n\n  // Returns a new instance of metadata with a clean state. All the previous state will be reset.\n  async updateSDK(params?: { withShare?: ShareStore }): Promise<ThresholdKey> {\n    const tb = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      modules: this.modules,\n      serviceProvider: this.serviceProvider,\n      storageLayer: this.storageLayer,\n      manualSync: this.manualSync,\n    });\n\n    try {\n      await tb.initialize({ neverInitializeNewKey: true, withShare: params && params.withShare });\n    } catch (err) {\n      throw CoreError.fromCode(1103, `${err.message}`);\n    }\n\n    // Delete unnecessary polyIDs and shareStores\n    const allPolyIDList = tb.metadata.polyIDList;\n    let lastValidPolyID;\n\n    Object.keys(this.shares).forEach((x) => {\n      if (allPolyIDList.find((id) => id[0] === x)) {\n        lastValidPolyID = x;\n      } else {\n        delete this.shares[x];\n      }\n    });\n\n    // catchup to latest shareStore for all latest available shares.\n    // TODO: fix edge cases where shares are deleted in the newer polynomials\n    // TODO: maybe assign this.shares directly rather than output and inputsharestore.\n    const shareStoresForLastValidPolyID = Object.keys(this.shares[lastValidPolyID]).map((x) =>\n      tb.inputShareStoreSafe(this.outputShareStore(x, lastValidPolyID))\n    );\n    await Promise.all(shareStoresForLastValidPolyID);\n    return tb;\n  }\n\n  // NOTE: This API will be DEPRECATED in the future in favour of inputShareStoreSafe()\n  inputShareStore(shareStore: ShareStore): void {\n    let ss: ShareStore;\n    if (shareStore instanceof ShareStore) {\n      ss = shareStore;\n    } else if (typeof shareStore === \"object\") {\n      ss = ShareStore.fromJSON(shareStore);\n    } else {\n      throw CoreError.default(\"can only add type ShareStore into shares\");\n    }\n    if (!(ss.polynomialID in this.shares)) {\n      this.shares[ss.polynomialID] = {};\n    }\n    this.shares[ss.polynomialID][ss.share.shareIndex.toString(\"hex\")] = ss;\n  }\n\n  // inputs a share ensuring that the share is the latest share AND metadata is updated to its latest state\n  async inputShareStoreSafe(shareStore: ShareStore, autoUpdateMetadata = false): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let ss: ShareStore;\n    if (shareStore instanceof ShareStore) {\n      ss = shareStore;\n    } else if (typeof shareStore === \"object\") {\n      ss = ShareStore.fromJSON(shareStore);\n    } else {\n      throw CoreError.default(\"can only add type ShareStore into shares\");\n    }\n    const latestShareRes = await this.catchupToLatestShare({ shareStore: ss, includeLocalMetadataTransitions: true });\n    // if not in poly id list, metadata is probably outdated\n    // is !this.metadata.polyIDList.includes(latestShareRes.latestShare.polynomialID)\n    if (!this.metadata.polyIDList.find((tuple) => tuple[0] === latestShareRes.latestShare.polynomialID)) {\n      if (!autoUpdateMetadata)\n        throw CoreError.default(\n          `TKey SDK metadata seems to be outdated because shareIndex: ` +\n            `${latestShareRes.latestShare.share.shareIndex.toString(\"hex\")} has a more recent metadata. Please call updateSDK first`\n        );\n      else this.metadata = latestShareRes.shareMetadata;\n    }\n    if (!(latestShareRes.latestShare.polynomialID in this.shares)) {\n      this.shares[latestShareRes.latestShare.polynomialID] = {};\n    }\n    this.shares[latestShareRes.latestShare.polynomialID][latestShareRes.latestShare.share.shareIndex.toString(\"hex\")] = latestShareRes.latestShare;\n  }\n\n  outputShareStore(shareIndex: BNString, polyID?: string): ShareStore {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let shareIndexParsed: BN;\n    if (typeof shareIndex === \"number\") {\n      shareIndexParsed = new BN(shareIndex);\n    } else if (BN.isBN(shareIndex)) {\n      shareIndexParsed = shareIndex;\n    } else if (typeof shareIndex === \"string\") {\n      shareIndexParsed = new BN(shareIndex, \"hex\");\n    }\n    let polyIDToSearch: string;\n    if (polyID) {\n      polyIDToSearch = polyID;\n    } else {\n      polyIDToSearch = this.metadata.getLatestPublicPolynomial().getPolynomialID();\n    }\n    if (!this.metadata.getShareIndexesForPolynomial(polyIDToSearch).includes(shareIndexParsed.toString(\"hex\"))) {\n      throw new CoreError(1002, \"no such share index created\");\n    }\n    const shareFromStore = this.shares[polyIDToSearch][shareIndexParsed.toString(\"hex\")];\n    if (shareFromStore) return shareFromStore;\n    const poly = this.reconstructLatestPoly();\n    const shareMap = poly.generateShares([shareIndexParsed]);\n\n    return new ShareStore(shareMap[shareIndexParsed.toString(\"hex\")], polyIDToSearch);\n  }\n\n  _setKey(privKey: BN): void {\n    this.privKey = privKey;\n  }\n\n  getCurrentShareIndexes(): string[] {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const latestPolynomial = this.metadata.getLatestPublicPolynomial();\n    const latestPolynomialId = latestPolynomial.getPolynomialID();\n    const currentShareIndexes = Object.keys(this.shares[latestPolynomialId]);\n    return currentShareIndexes;\n  }\n\n  getKeyDetails(): KeyDetails {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const poly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = poly.getPolynomialID();\n    const requiredShares = poly.getThreshold() - Object.keys(this.shares[previousPolyID]).length;\n\n    let shareDescriptions = this.metadata.getShareDescription();\n    if (shareDescriptions) {\n      const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n      shareDescriptions = Object.keys(shareDescriptions).reduce((acc, index) => {\n        if (existingShareIndexes.indexOf(index) >= 0) acc[index] = shareDescriptions[index];\n        return acc;\n      }, {});\n    }\n\n    return {\n      pubKey: this.metadata.pubKey,\n      requiredShares,\n      threshold: poly.getThreshold(),\n      totalShares: this.metadata.getShareIndexesForPolynomial(previousPolyID).length,\n      shareDescriptions,\n    };\n  }\n\n  // Auth functions\n\n  generateAuthMetadata(params: { input: Metadata[] }): AuthMetadata[] {\n    const { input } = params;\n    const authMetadatas = [];\n    for (let i = 0; i < input.length; i += 1) {\n      authMetadatas.push(new AuthMetadata(input[i], this.privKey));\n    }\n    return authMetadatas;\n  }\n\n  setAuthMetadata(params: { input: Metadata; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{\n    message: string;\n  }> {\n    const { input, serviceProvider, privKey } = params;\n    const authMetadata = new AuthMetadata(input, this.privKey);\n    return this.storageLayer.setMetadata({ input: authMetadata, serviceProvider, privKey });\n  }\n\n  async setAuthMetadataBulk(params: { input: Metadata[]; serviceProvider?: IServiceProvider; privKey?: BN[] }): Promise<void> {\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const { input, serviceProvider, privKey } = params;\n    const authMetadatas = [] as AuthMetadata[];\n    for (let i = 0; i < input.length; i += 1) {\n      authMetadatas.push(new AuthMetadata(input[i], this.privKey));\n    }\n    await this.addLocalMetadataTransitions({ input: authMetadatas, serviceProvider, privKey });\n  }\n\n  async getAuthMetadata(params: { serviceProvider?: IServiceProvider; privKey?: BN; includeLocalMetadataTransitions?: boolean }): Promise<Metadata> {\n    const raw = await this.getGenericMetadataWithTransitionStates({ ...params, fromJSONConstructor: AuthMetadata });\n    const authMetadata = raw as AuthMetadata;\n    return authMetadata.metadata;\n  }\n\n  // fetches the latest metadata potentially searching in local transition states first\n  async getGenericMetadataWithTransitionStates(params: {\n    fromJSONConstructor: FromJSONConstructor;\n    serviceProvider?: IServiceProvider;\n    privKey?: BN;\n    includeLocalMetadataTransitions?: boolean;\n    _localMetadataTransitions?: LocalMetadataTransitions;\n  }): Promise<unknown> {\n    if (!((params.serviceProvider && params.serviceProvider.postboxKey.toString(\"hex\") !== \"0\") || params.privKey)) {\n      throw CoreError.default(\"require either serviceProvider or priv key in getGenericMetadataWithTransitionStates\");\n    }\n    if (params.includeLocalMetadataTransitions) {\n      const transitions: LocalMetadataTransitions = params._localMetadataTransitions\n        ? params._localMetadataTransitions\n        : this._localMetadataTransitions;\n      let index = null;\n      for (let i = transitions[0].length - 1; i >= 0; i -= 1) {\n        const x = transitions[0][i];\n        if (params.privKey && x && x.cmp(params.privKey) === 0) index = i;\n        else if (params.serviceProvider && !x) index = i;\n      }\n      if (index !== null) {\n        return transitions[1][index];\n      }\n    }\n    let raw: IMessageMetadata;\n    try {\n      raw = await this.storageLayer.getMetadata(params);\n    } catch (err) {\n      throw CoreError.metadataGetFailed(`${prettyPrintError(err)}`);\n    }\n    if ((raw as IMessageMetadata).message === SHARE_DELETED) {\n      throw CoreError.fromCode(1308);\n    }\n    return params.fromJSONConstructor.fromJSON(raw);\n  }\n\n  // Lock functions\n  async acquireWriteMetadataLock(): Promise<number> {\n    if (this.haveWriteMetadataLock) return this.metadata.nonce;\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n\n    // we check the metadata of a random share we have on the latest polynomial we know that reflects the cloud\n    // below we cater for if we have an existing share or need to create the share in the SDK\n    let randomShareStore: ShareStore;\n    const latestPolyIDOnCloud = this.lastFetchedCloudMetadata.getLatestPublicPolynomial().getPolynomialID();\n    const shareIndexesExistInSDK = Object.keys(this.shares[latestPolyIDOnCloud]);\n    const randomIndex = shareIndexesExistInSDK[Math.floor(Math.random() * (shareIndexesExistInSDK.length - 1))];\n    if (shareIndexesExistInSDK.length >= 1) {\n      randomShareStore = this.shares[latestPolyIDOnCloud][randomIndex];\n    } else {\n      randomShareStore = this.outputShareStore(randomIndex, latestPolyIDOnCloud);\n    }\n    const latestRes = await this.catchupToLatestShare({ shareStore: randomShareStore });\n    const latestMetadata = latestRes.shareMetadata;\n\n    // read errors for what each means\n    if (latestMetadata.nonce > this.lastFetchedCloudMetadata.nonce) {\n      throw CoreError.acquireLockFailed(`unable to acquire write access for metadata due to \n      lastFetchedCloudMetadata (${this.lastFetchedCloudMetadata.nonce})\n           being lower than last written metadata nonce (${latestMetadata.nonce}). perhaps update metadata SDK (create new tKey and init)`);\n    } else if (latestMetadata.nonce < this.lastFetchedCloudMetadata.nonce) {\n      throw CoreError.acquireLockFailed(`unable to acquire write access for metadata due to \n      lastFetchedCloudMetadata (${this.lastFetchedCloudMetadata.nonce})\n      being higher than last written metadata nonce (${latestMetadata.nonce}). this should never happen as it \n      should only ever be updated by getting metadata)`);\n    }\n\n    const res = await this.storageLayer.acquireWriteLock({ privKey: this.privKey });\n    if (res.status !== 1) throw CoreError.acquireLockFailed(`lock cannot be acquired from storage layer status code: ${res.status}`);\n\n    // increment metadata nonce for write session\n    // this.metadata.nonce += 1;\n    this.haveWriteMetadataLock = res.id;\n    return this.metadata.nonce;\n  }\n\n  async releaseWriteMetadataLock(): Promise<void> {\n    if (!this.haveWriteMetadataLock) throw CoreError.releaseLockFailed(\"releaseWriteMetadataLock - don't have metadata lock to release\");\n    const res = await this.storageLayer.releaseWriteLock({ privKey: this.privKey, id: this.haveWriteMetadataLock });\n    if (res.status !== 1) throw CoreError.releaseLockFailed(`lock cannot be released from storage layer status code: ${res.status}`);\n    this.haveWriteMetadataLock = \"\";\n  }\n\n  // Module functions\n\n  async _syncShareMetadata(adjustScopedStore?: (ss: unknown) => unknown): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n\n    const shareArray = this.getAllShareStoresForLatestPolynomial().map((x) => x.share.share);\n    await this.syncMultipleShareMetadata(shareArray, adjustScopedStore);\n  }\n\n  async syncMultipleShareMetadata(shares: BN[], adjustScopedStore?: (ss: unknown) => unknown): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.nonce += 1;\n\n    const newMetadataPromise = shares.map(async (share) => {\n      const newMetadata = this.metadata.clone();\n      let specificShareMetadata: Metadata;\n      try {\n        specificShareMetadata = await this.getAuthMetadata({ privKey: share, includeLocalMetadataTransitions: true });\n      } catch (err) {\n        throw CoreError.authMetadataGetUnavailable(`${prettyPrintError(err)}`);\n      }\n\n      let scopedStoreToBeSet;\n      if (adjustScopedStore) {\n        scopedStoreToBeSet = adjustScopedStore(specificShareMetadata.scopedStore);\n      } else {\n        scopedStoreToBeSet = specificShareMetadata.scopedStore;\n      }\n      newMetadata.scopedStore = scopedStoreToBeSet;\n      return newMetadata;\n    });\n    const newMetadata = await Promise.all(newMetadataPromise);\n    return this.setAuthMetadataBulk({ input: newMetadata, privKey: shares });\n  }\n\n  _addRefreshMiddleware(\n    moduleName: string,\n    middleware: (generalStore: unknown, oldShareStores: ShareStoreMap, newShareStores: ShareStoreMap) => unknown\n  ): void {\n    this._refreshMiddleware[moduleName] = middleware;\n  }\n\n  _addReconstructKeyMiddleware(moduleName: string, middleware: () => Promise<BN[]>): void {\n    this._reconstructKeyMiddleware[moduleName] = middleware;\n  }\n\n  _addShareSerializationMiddleware(\n    serialize: (share: BN, type: string) => Promise<unknown>,\n    deserialize: (serializedShare: unknown, type: string) => Promise<BN>\n  ): void {\n    this._shareSerializationMiddleware = {\n      serialize,\n      deserialize,\n    };\n  }\n\n  _setDeviceStorage(storeDeviceStorage: (deviceShareStore: ShareStore) => Promise<void>): void {\n    if (this.storeDeviceShare) {\n      throw CoreError.default(\"storeDeviceShare already set\");\n    }\n    this.storeDeviceShare = storeDeviceStorage;\n  }\n\n  async addShareDescription(shareIndex: string, description: string, updateMetadata?: boolean): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.addShareDescription(shareIndex, description);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n\n  async deleteShareDescription(shareIndex: string, description: string, updateMetadata?: boolean): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.deleteShareDescription(shareIndex, description);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n\n  async updateShareDescription(shareIndex: string, oldDescription: string, newDescription: string, updateMetadata?: boolean): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.updateShareDescription(shareIndex, oldDescription, newDescription);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n\n  async encrypt(data: Buffer): Promise<EncryptedMessage> {\n    if (!this.privKey) throw CoreError.privateKeyUnavailable();\n    return encrypt(getPubKeyECC(this.privKey), data);\n  }\n\n  async decrypt(encryptedMessage: EncryptedMessage): Promise<Buffer> {\n    if (!this.privKey) throw CoreError.privateKeyUnavailable();\n    return decrypt(toPrivKeyECC(this.privKey), encryptedMessage);\n  }\n\n  async _setTKeyStoreItem(moduleName: string, data: TkeyStoreItemType): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems: EncryptedMessage[] = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    const encryptedData = await this.encrypt(Buffer.from(stringify(data)));\n    const duplicateItemIndex = decryptedItems.findIndex((x) => x.id === data.id);\n    if (duplicateItemIndex > -1) {\n      rawTkeyStoreItems[duplicateItemIndex] = encryptedData;\n    } else {\n      rawTkeyStoreItems.push(encryptedData);\n    }\n\n    // update metadataStore\n    this.metadata.setTkeyStoreDomain(moduleName, rawTkeyStoreItems);\n    await this._syncShareMetadata();\n  }\n\n  async _deleteTKeyStoreItem(moduleName: string, id: string): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    const finalItems = decryptedItems.filter((x) => x.id !== id);\n    this.metadata.setTkeyStoreDomain(moduleName, finalItems);\n    await this._syncShareMetadata();\n  }\n\n  async getTKeyStore(moduleName: string): Promise<TkeyStoreItemType[]> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    return decryptedItems;\n  }\n\n  async getTKeyStoreItem(moduleName: string, id: string): Promise<TkeyStoreItemType> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    const item = decryptedItems.find((x) => x.id === id);\n    return item;\n  }\n\n  // Import export shares\n  async outputShare(shareIndex: BNString, type?: string): Promise<unknown> {\n    const { share } = this.outputShareStore(shareIndex).share;\n    if (!type) return share;\n\n    return this._shareSerializationMiddleware.serialize(share, type);\n  }\n\n  async inputShare(share: unknown, type?: string): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let shareStore: ShareStore;\n    if (!type) shareStore = this.metadata.shareToShareStore(share as BN);\n    else {\n      const deserialized = await this._shareSerializationMiddleware.deserialize(share, type);\n      shareStore = this.metadata.shareToShareStore(deserialized);\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const fullShareIndexesList = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    if (!fullShareIndexesList.includes(shareStore.share.shareIndex.toString(\"hex\"))) {\n      throw CoreError.default(\"Latest poly doesn't include this share\");\n    }\n    await this.inputShareStoreSafe(shareStore);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shares: this.shares,\n      enableLogging: this.enableLogging,\n      privKey: this.privKey ? this.privKey.toString(\"hex\") : undefined,\n      metadata: this.metadata,\n      lastFetchedCloudMetadata: this.lastFetchedCloudMetadata,\n      _localMetadataTransitions: this._localMetadataTransitions,\n      manualSync: this.manualSync,\n      serviceProvider: this.serviceProvider,\n      storageLayer: this.storageLayer,\n    };\n  }\n\n  getAllShareStoresForLatestPolynomial(): ShareStore[] {\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    const threshold = pubPoly.getThreshold();\n\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[pubPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares for polynomial reconstruction\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[pubPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    const currentPoly = lagrangeInterpolatePolynomial(pointsArr);\n    const allExistingShares = currentPoly.generateShares(existingShareIndexes);\n    const shareArray = existingShareIndexes.map((shareIndex) => {\n      return this.metadata.shareToShareStore(allExistingShares[shareIndex].share);\n    });\n    return shareArray;\n  }\n\n  /// Destructive method. All data will be wiped!\n  async CRITICAL_deleteTkey(): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (this._localMetadataTransitions[0].length > 0 || this._localMetadataTransitions[1].length > 0) {\n      throw CoreError.default(\"Please sync all local state before calling this function\");\n    }\n\n    // Construct all shares\n    const shareArray = this.getAllShareStoresForLatestPolynomial();\n    await this.addLocalMetadataTransitions({\n      input: [...Array(shareArray.length).fill({ message: SHARE_DELETED, dateAdded: Date.now() }), { message: KEY_NOT_FOUND }],\n      privKey: [...shareArray.map((x) => x.share.share), undefined],\n    });\n    await this.syncLocalMetadataTransitions(); // forcesync\n\n    this.privKey = undefined;\n    this.metadata = undefined;\n    this.shares = {};\n    this.lastFetchedCloudMetadata = undefined;\n  }\n\n  getApi(): ITKeyApi {\n    return {\n      getMetadata: this.getMetadata.bind(this),\n      getStorageLayer: this.getStorageLayer.bind(this),\n      initialize: this.initialize.bind(this),\n      catchupToLatestShare: this.catchupToLatestShare.bind(this),\n      _syncShareMetadata: this._syncShareMetadata.bind(this),\n      _addRefreshMiddleware: this._addRefreshMiddleware.bind(this),\n      _addReconstructKeyMiddleware: this._addReconstructKeyMiddleware.bind(this),\n      _addShareSerializationMiddleware: this._addShareSerializationMiddleware.bind(this),\n      addShareDescription: this.addShareDescription.bind(this),\n      generateNewShare: this.generateNewShare.bind(this),\n      inputShareStore: this.inputShareStore.bind(this),\n      inputShareStoreSafe: this.inputShareStoreSafe.bind(this),\n      outputShareStore: this.outputShareStore.bind(this),\n      inputShare: this.inputShare.bind(this),\n      outputShare: this.outputShare.bind(this),\n      _setDeviceStorage: this._setDeviceStorage.bind(this),\n      encrypt: this.encrypt.bind(this),\n      decrypt: this.decrypt.bind(this),\n      getTKeyStore: this.getTKeyStore.bind(this),\n      getTKeyStoreItem: this.getTKeyStoreItem.bind(this),\n      _setTKeyStoreItem: this._setTKeyStoreItem.bind(this),\n      _deleteTKeyStoreItem: this._deleteTKeyStoreItem.bind(this),\n      deleteShare: this.deleteShare.bind(this),\n    };\n  }\n\n  private setModuleReferences() {\n    Object.keys(this.modules).map((x) => this.modules[x].setModuleReferences(this.getApi()));\n  }\n\n  private async initializeModules() {\n    return Promise.all(Object.keys(this.modules).map((x) => this.modules[x].initialize()));\n  }\n}\n\nexport default ThresholdKey;\n","export { default as AuthMetadata } from \"./authMetadata\";\nexport { default } from \"./core\";\nexport { default as CoreError } from \"./errors\";\nexport * from \"./lagrangeInterpolatePolynomial\";\nexport { default as Metadata } from \"./metadata\";\n"],"names":["TkeyError","CoreError","code","message","Object","defineProperty","value","extraMessage","messages","fromCode","ecCurve","generatePrivateExcludingIndexes","Point","Polynomial","generatePrivate","BN","generateEmptyBNArray","length","Array","from","denominator","i","innerPoints","result","xi","x","j","tmp","sub","umod","curve","n","mul","interpolationPoly","coefficients","d","cmp","default","invm","k","newCoefficients","add","pointSort","pointArrClone","sort","a","b","lagrange","unsortedPoints","sortedPoints","polynomial","y","lagrangeInterpolatePolynomial","points","lagrangeInterpolation","shares","nodeIndex","secret","upper","lower","neg","temp","delta","generateRandomPolynomial","degree","deterministicShares","actualS","poly","share","push","isArray","forEach","shareIndex","toString","undefined","values","polyCommitmentEval","polyCommitments","index","basePtPolyCommitments","key","keyFromPublic","getPublic","shareCommitment","factor","pow","e","getX","getY","decrypt","getPubKeyPoint","PublicPolynomial","PublicShare","Share","ShareStore","toPrivKeyECC","stringify","Metadata","input","publicPolynomials","publicShares","generalStore","tkeyStore","scopedStore","pubKey","polyIDList","nonce","polyID","matchingPolyIDs","filter","tuple","polynomialID","publicShare","obj","arr","publicPolynomial","getPublicPolynomial","getPolynomialID","shareIndexArr","addPublicShare","getPublicShare","prototype","hasOwnProperty","call","domain","data","shareStore","pubShare","encryptedShareStore","encryptedShares","encryptedShareStoreUnavailable","encryptedShare","rawDecrypted","fromJSON","JSON","parse","getGeneralStoreDomain","description","currentSD","setGeneralStoreDomain","indexOf","splice","oldDescription","newDescription","pubkey","returnShare","el","t","polynomialCommitments","eq","tempShare","serializedPolyIDList","shareIndexes","sortedShareIndexes","serializedPolyID","split","concat","join","encode","ec","point","fromCompressedPub","metadata","unserializedPolyIDList","arrPolyID","zeroIndex","findIndex","v","firstHalf","slice","secondHalf","pubPolyID","pointCommitments","compressedCommitment","stripHexPrefix","toPrivKeyEC","keccak256","AuthMetadata","privKey","privKeyUnavailable","sig","sign","toDER","m","metadataPubKeyUnavailable","pubK","verify","encrypt","getPubKeyECC","KEY_NOT_FOUND","ONE_KEY_DELETE_NONCE","prettyPrintError","SHARE_DELETED","ThresholdKey","args","enableLogging","modules","serviceProvider","storageLayer","manualSync","_refreshMiddleware","_reconstructKeyMiddleware","_shareSerializationMiddleware","storeDeviceShare","_localMetadataTransitions","setModuleReferences","haveWriteMetadataLock","metadataUndefined","params","p","delete1OutOf1","delete1OutOf1OnlyManualSync","withShare","importKey","neverInitializeNewKey","transitionMetadata","previouslyFetchedCloudMetadata","previousLocalMetadataTransitions","previousLocalMetadataTransitionsExists","reinitializing","reinitializingWithNewKeyAssign","spIncludeLocalMetadataTransitions","spLocalMetadataTransitions","getGenericMetadataWithTransitionStates","includeLocalMetadataTransitions","fromJSONConstructor","val","rawServiceProviderShare","noKeyFound","_initializeNewKey","initializeModules","importedKey","getKeyDetails","catchupToLatestShare","latestShareDetails","noMetadataExistsForShare","shareMetadata","latestCloudMetadata","clone","currentMetadata","lastFetchedCloudMetadata","latestShare","inputShareStore","getAuthMetadata","authMetadataGetUnavailable","getEncryptedShare","nextShare","pubPoly","getLatestPublicPolynomial","requiredThreshold","getThreshold","sharesLeft","fullShareList","getShareIndexesForPolynomial","shareIndexesRequired","sharesToInput","z","sharesForPoly","shareIndexesForPoly","keys","currentShareForPoly","latestShareRes","unableToReconstruct","polyShares","shareArr","reconstructedPubKey","incorrectReconstruction","_setKey","returnObject","allKeys","Promise","all","map","extraKeys","threshold","pointsArr","sharesForExistingPoly","Set","size","privateKeyUnavailable","shareIndexToDelete","shareToDelete","outputShareStore","previousPolyID","existingShareIndexes","newShareIndexes","bn","_refreshShares","results","newShareStores","shareStores","addLocalMetadataTransitions","dateAdded","Date","now","existingShareIndexesBN","newShareIndex","generateShares","oldPoly","shareIndexesNeedingEncryption","shareIndexHex","includes","addFromPolynomialAndShares","oldShareStores","newScopedStore","oldShare","polyEval","Buffer","sharesToPush","setScopedStore","metadataToPush","fill","moduleName","adjustedGeneralStore","deleteGeneralStoreDomain","newShareMetadataToPush","newShareStoreSharesToPush","me","AuthMetadatas","generateAuthMetadata","determinedShare","tmpPriv","shareIndexForDeviceStorage","shareIndexForDeterminedShare","serviceProviderShare","authMetadatas","postboxKey","deviceShare","userShare","syncLocalMetadataTransitions","acquiredLock","acquireWriteMetadataLock","setMetadataStream","metadataPostFailed","releaseWriteMetadataLock","tb","initialize","allPolyIDList","find","id","lastValidPolyID","shareStoresForLastValidPolyID","inputShareStoreSafe","ss","autoUpdateMetadata","shareIndexParsed","isBN","polyIDToSearch","shareFromStore","reconstructLatestPoly","shareMap","latestPolynomial","latestPolynomialId","currentShareIndexes","requiredShares","shareDescriptions","getShareDescription","reduce","acc","totalShares","authMetadata","setMetadata","raw","transitions","getMetadata","metadataGetFailed","latestPolyIDOnCloud","shareIndexesExistInSDK","randomIndex","Math","floor","random","randomShareStore","latestRes","latestMetadata","acquireLockFailed","acquireWriteLock","res","status","releaseLockFailed","releaseWriteLock","adjustScopedStore","shareArray","getAllShareStoresForLatestPolynomial","syncMultipleShareMetadata","newMetadataPromise","newMetadata","specificShareMetadata","scopedStoreToBeSet","setAuthMetadataBulk","middleware","serialize","deserialize","storeDeviceStorage","updateMetadata","addShareDescription","_syncShareMetadata","deleteShareDescription","updateShareDescription","encryptedMessage","rawTkeyStoreItems","getTkeyStoreDomain","decryptedItem","decryptedItems","encryptedData","duplicateItemIndex","setTkeyStoreDomain","finalItems","item","type","shareToShareStore","deserialized","fullShareIndexesList","currentPoly","allExistingShares","bind","getStorageLayer","_addRefreshMiddleware","_addReconstructKeyMiddleware","_addShareSerializationMiddleware","generateNewShare","inputShare","outputShare","_setDeviceStorage","getTKeyStore","getTKeyStoreItem","_setTKeyStoreItem","_deleteTKeyStoreItem","deleteShare","getApi","shareStoreMapElement","shareElementKey","AuthMetadataKeys","ShareStoreKeys","sampleMessageMetadata","MessageMetadataKeys","localTransitionShares","localTransitionData","every","tempAuth","shareToUseForSerialization","tempMetadata","tempCloud"],"sourceRoot":""}