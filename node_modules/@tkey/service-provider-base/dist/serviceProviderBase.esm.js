import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { encrypt, decrypt, toPrivKeyECC, toPrivKeyEC, getPubKeyECC } from '@tkey/common-types';
import BN from 'bn.js';

var ServiceProviderBase = /*#__PURE__*/function () {
  // For easy serialization

  function ServiceProviderBase(_ref) {
    var _ref$enableLogging = _ref.enableLogging,
      enableLogging = _ref$enableLogging === void 0 ? false : _ref$enableLogging,
      postboxKey = _ref.postboxKey;
    _classCallCheck(this, ServiceProviderBase);
    _defineProperty(this, "enableLogging", void 0);
    _defineProperty(this, "postboxKey", void 0);
    _defineProperty(this, "serviceProviderName", void 0);
    this.enableLogging = enableLogging;
    this.postboxKey = new BN(postboxKey, "hex");
    this.serviceProviderName = "ServiceProviderBase";
  }
  _createClass(ServiceProviderBase, [{
    key: "encrypt",
    value: function () {
      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(msg) {
        var publicKey;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                publicKey = this.retrievePubKey("ecc");
                return _context.abrupt("return", encrypt(publicKey, msg));
              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function encrypt$1(_x) {
        return _encrypt.apply(this, arguments);
      }
      return encrypt$1;
    }()
  }, {
    key: "decrypt",
    value: function () {
      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(msg) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", decrypt(toPrivKeyECC(this.postboxKey), msg));
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function decrypt$1(_x2) {
        return _decrypt.apply(this, arguments);
      }
      return decrypt$1;
    }()
  }, {
    key: "retrievePubKeyPoint",
    value: function retrievePubKeyPoint() {
      return toPrivKeyEC(this.postboxKey).getPublic();
    }
  }, {
    key: "retrievePubKey",
    value: function retrievePubKey(type) {
      if (type === "ecc") {
        return getPubKeyECC(this.postboxKey);
      }
      throw new Error("Unsupported pub key type");
    }
  }, {
    key: "sign",
    value: function sign(msg) {
      var tmp = new BN(msg, "hex");
      var sig = toPrivKeyEC(this.postboxKey).sign(tmp.toString("hex"));
      return Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(0).toString(16, 2), "hex").toString("base64");
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        enableLogging: this.enableLogging,
        postboxKey: this.postboxKey.toString("hex"),
        serviceProviderName: this.serviceProviderName
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(value) {
      var enableLogging = value.enableLogging,
        postboxKey = value.postboxKey,
        serviceProviderName = value.serviceProviderName;
      if (serviceProviderName !== "ServiceProviderBase") return undefined;
      return new ServiceProviderBase({
        enableLogging: enableLogging,
        postboxKey: postboxKey
      });
    }
  }]);
  return ServiceProviderBase;
}();

export { ServiceProviderBase, ServiceProviderBase as default };
//# sourceMappingURL=serviceProviderBase.esm.js.map
