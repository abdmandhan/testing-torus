import { StringifiedType, TorusServiceProviderArgs } from "@tkey/common-types";
import { ServiceProviderBase } from "@tkey/service-provider-base";
import CustomAuth, { AggregateLoginParams, CustomAuthArgs, HybridAggregateLoginParams, InitParams, SubVerifierDetails, TorusAggregateLoginResponse, TorusHybridAggregateLoginResponse, TorusLoginResponse } from "@toruslabs/customauth";
import BN from "bn.js";
declare class TorusServiceProvider extends ServiceProviderBase {
    directWeb: CustomAuth;
    singleLoginKey: BN;
    customAuthArgs: CustomAuthArgs;
    constructor({ enableLogging, postboxKey, customAuthArgs }: TorusServiceProviderArgs);
    static fromJSON(value: StringifiedType): TorusServiceProvider;
    init(params: InitParams): Promise<void>;
    triggerLogin(params: SubVerifierDetails): Promise<TorusLoginResponse>;
    triggerAggregateLogin(params: AggregateLoginParams): Promise<TorusAggregateLoginResponse>;
    triggerHybridAggregateLogin(params: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse>;
    toJSON(): StringifiedType;
}
export default TorusServiceProvider;
