{"version":3,"file":"torusUtils-node.js","mappings":";;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,wBAA4B;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,iCAA4B;;;;ACAkC;AACnC;AACW;;AAE5C,2CAA2C,gCAAgC,oCAAoC,oDAAoD,6DAA6D,iEAAiE,sCAAsC;;AAEvU,iCAAiC,gBAAgB,sBAAsB,OAAO,uDAAuD,6DAA6D,wBAAe,6BAA6B,oKAAoK,mFAAmF,KAAK;AAC1e,YAAY,qCAAkB;AAC9B,aAAa,6CAAW;AACxB;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK,GAAG;;AAER,2BAA2B,KAAK;AAChC,mBAAmB;;AAEnB,0BAA0B;;AAE1B;AACA;;AAEA,SAAS,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA,kBAAkB,+BAAK;AACvB;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA,kBAAkB,+BAAK;AACvB;AACA,GAAG,GAAG;AACN;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,+DAA+D;AAC/D,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;AACL;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA,GAAG,GAAG;AACN;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,+DAA+D;AAC/D,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;AACL;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA,GAAG,GAAG;AACN;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,+DAA+D;AAC/D,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;AACL;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,+DAA+D;AAC/D,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEyP;AACzP;;;ACzSA,MAAM,8BAA4B;;;ACAlC,MAAM,iCAA4B;;ACAlC,MAAM,8CAA4B;;;ACAlC,MAAM,mCAA4B;;ACAF;AAEhC,MAAMC,YAAG,GAAGD,qCAAkB,CAAC,UAAU,CAAC;AAC1CC,YAAG,CAACE,UAAU,EAAE;AAEhB,+CAAeF,YAAG;;;ACLlB,SA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","sources":["webpack://@toruslabs/torus.js/external commonjs \"node-fetch\"","webpack://@toruslabs/torus.js/webpack/bootstrap","webpack://@toruslabs/torus.js/webpack/runtime/compat get default export","webpack://@toruslabs/torus.js/webpack/runtime/define property getters","webpack://@toruslabs/torus.js/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/torus.js/webpack/runtime/make namespace object","webpack://@toruslabs/torus.js/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/torus.js/external commonjs \"@toruslabs/eccrypto\"","webpack://@toruslabs/torus.js/external commonjs \"lodash.merge\"","webpack://@toruslabs/torus.js/external commonjs \"loglevel\"","webpack://@toruslabs/torus.js/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js","webpack://@toruslabs/torus.js/external commonjs \"bn.js\"","webpack://@toruslabs/torus.js/external commonjs \"elliptic\"","webpack://@toruslabs/torus.js/external commonjs \"json-stable-stringify\"","webpack://@toruslabs/torus.js/external commonjs \"web3-utils\"","webpack://@toruslabs/torus.js/./src/loglevel.ts","webpack://@toruslabs/torus.js/./src/some.ts","webpack://@toruslabs/torus.js/external commonjs \"keccak\"","webpack://@toruslabs/torus.js/./src/utils.ts","webpack://@toruslabs/torus.js/./src/torus.ts","webpack://@toruslabs/torus.js/./src/index.ts"],"sourcesContent":["module.exports = require(\"node-fetch\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url, init) {\n  let _url = null;\n\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url\n    });\n    const span = transaction.startChild({\n      op: \"http\"\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst put = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PUT\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetchAndTrace(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, enableSentryTracing, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, put, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nexport default log;\n","function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport class SomeError<T> extends Error {\n  errors: Error[];\n\n  responses: T[];\n\n  predicate: string;\n\n  constructor({ errors, responses, predicate }: { errors: Error[]; responses: T[]; predicate: string }) {\n    super(\"Unable to resolve enough promises.\");\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n}\n\nexport const Some = <K, T>(promises: Promise<K>[], predicate: (resultArr: K[], { resolved }: { resolved: boolean }) => Promise<T>): Promise<T> =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0;\n    const sharedState = { resolved: false };\n    const errorArr: Error[] = new Array(promises.length).fill(undefined);\n    const resultArr: K[] = new Array(promises.length).fill(undefined);\n    let predicateError: Error | string;\n    // eslint-disable-next-line no-promise-executor-return\n    return promises.forEach((x, index) => {\n      return (\n        x\n          .then((resp: K) => {\n            resultArr[index] = resp;\n            return undefined;\n          })\n          .catch((error: Error) => {\n            errorArr[index] = error;\n          })\n          // eslint-disable-next-line promise/no-return-in-finally\n          .finally(() => {\n            if (sharedState.resolved) return;\n            return predicate(resultArr.slice(0), sharedState)\n              .then((data) => {\n                sharedState.resolved = true;\n                resolve(data);\n                return undefined;\n              })\n              .catch((error) => {\n                // log only the last predicate error\n                predicateError = error;\n              })\n              .finally(() => {\n                finishedCount += 1;\n                if (finishedCount === promises.length) {\n                  const errors = Object.values(\n                    resultArr.reduce((acc: Record<string, string>, z) => {\n                      if (z) {\n                        const { id, error } = z as { id?: string; error?: { data?: string } };\n                        if (error?.data?.length > 0) {\n                          if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);\n                          else acc[id] = error.data;\n                        }\n                      }\n                      return acc;\n                    }, {})\n                  );\n\n                  if (errors.length > 0) {\n                    // Format-able errors\n                    const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join(\"\\n\")}` : errors[0];\n                    reject(new Error(msg));\n                  } else {\n                    reject(\n                      new SomeError({\n                        errors: errorArr,\n                        responses: resultArr,\n                        predicate: (predicateError as Error)?.message || (predicateError as string),\n                      })\n                    );\n                  }\n                }\n              });\n          })\n      );\n    });\n  });\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"keccak\");","import { generateJsonRPCObject, post } from \"@toruslabs/http-helpers\";\nimport JsonStringify from \"json-stable-stringify\";\nimport createKeccakHash from \"keccak\";\n\nimport { JRPCResponse, KeyAssignInput, KeyLookupResult, SignerResponse, VerifierLookupResponse } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport const thresholdSame = <T>(arr: T[], t: number): T | undefined => {\n  const hashMap: Record<string, number> = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\n\nexport const keyLookup = async (endpoints: string[], verifier: string, verifierId: string): Promise<KeyLookupResult> => {\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<VerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(\"VerifierLookupRequest\", {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error(\"lookup request failed\", err))\n  );\n  return Some<void | JRPCResponse<VerifierLookupResponse>, KeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1);\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    );\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nexport const waitKeyLookup = (endpoints: string[], verifier: string, verifierId: string, timeout: number): Promise<KeyLookupResult> =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n\nexport const keyAssign = async ({\n  endpoints,\n  torusNodePubs,\n  lastPoint,\n  firstPoint,\n  verifier,\n  verifierId,\n  signerHost,\n  network,\n}: KeyAssignInput): Promise<void> => {\n  let nodeNum: number;\n  let initialPoint: number | undefined;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n  });\n  try {\n    const signedData = await post<SignerResponse>(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    return await post<void>(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n      }\n    );\n  } catch (error) {\n    log.error(error);\n    const acceptedErrorMsgs = [\n      // Slow node\n      \"Timed out\",\n      // Happens when the node is not reachable (dns issue etc)\n      \"TypeError: Failed to fetch\", // All except iOS and Firefox\n      \"TypeError: cancelled\", // iOS\n      \"TypeError: NetworkError when attempting to fetch resource.\", // Firefox\n    ];\n    if (acceptedErrorMsgs.includes(error.message))\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost, network });\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`\n    );\n  }\n};\n\nexport function keccak256(a: string | Buffer): string {\n  const hash = createKeccakHash(\"keccak256\").update(a).digest().toString(\"hex\");\n  return `0x${hash}`;\n}\n","import { decrypt, generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport type { INodePub } from \"@toruslabs/fetch-node-details\";\nimport { Data, generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec as EC } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\nimport { toChecksumAddress } from \"web3-utils\";\n\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  JRPCResponse,\n  MetadataParams,\n  RetrieveSharesResponse,\n  SetCustomKeyOptions,\n  ShareRequestResult,\n  TorusCtorOptions,\n  TorusPublicKey,\n  VerifierLookupResponse,\n  VerifierParams,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\nimport { GetOrSetNonceError, kCombinations, keccak256, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from \"./utils\";\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  public metadataHost: string;\n\n  public allowHost: string;\n\n  public serverTimeOffset: number;\n\n  public enableOneKey: boolean;\n\n  public signerHost: string;\n\n  public network: string;\n\n  protected ec: EC;\n\n  constructor({\n    enableOneKey = false,\n    metadataHost = \"https://metadata.tor.us\",\n    allowHost = \"https://signer.tor.us/api/allow\",\n    signerHost = \"https://signer.tor.us/api/sign\",\n    serverTimeOffset = 0,\n    network = \"mainnet\",\n  }: TorusCtorOptions = {}) {\n    this.ec = new EC(\"secp256k1\");\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.signerHost = signerHost;\n    this.network = network;\n  }\n\n  static enableLogging(v = true): void {\n    if (v) log.enableAll();\n    else log.disableAll();\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err: unknown): boolean {\n    return err instanceof GetOrSetNonceError;\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    doesKeyAssign = false\n  ): Promise<TorusPublicKey> {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    let isNewKey = false;\n    let finalKeyResult: VerifierLookupResponse;\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      if (!doesKeyAssign) {\n        throw new Error(\"Verifier + VerifierID has not yet been assigned\");\n      }\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getUserTypeAndAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n      let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n      let pubNonce: { x: string; y: string } | undefined;\n\n      try {\n        nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        // pubNonce is never deleted, so we can use it to always get the tkey\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n        pubNonce = nonceResult.pubNonce;\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n\n      const finalX = modifiedPubKey.getX().toString(16);\n      const finalY = modifiedPubKey.getY().toString(16);\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getUserTypeAndAddress\", { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce });\n      return {\n        typeOfUser,\n        address,\n        X: finalX,\n        Y: finalY,\n        metadataNonce: nonce,\n        pubNonce,\n      };\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }: SetCustomKeyOptions): Promise<void> {\n    let torusKey: BN;\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16);\n    } else {\n      const privKey = new BN(privKeyHex as string, 16);\n      torusKey = privKey.sub(metadataNonce as BN).umod(this.ec.curve.n);\n    }\n    const customKey = new BN(customKeyHex, 16);\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey);\n    await this.setMetadata(data);\n  }\n\n  async retrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<RetrieveSharesResponse> {\n    const promiseArr = [];\n    await get<void>(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n          network: this.network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(idToken);\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post<JRPCResponse<CommitmentRequestResult>>(\n        endpoints[i],\n        generateJsonRPCObject(\"CommitmentRequest\", {\n          messageprefix: \"mug00\",\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    })\n      .then((responses) => {\n        const promiseArrRequest: Promise<void | JRPCResponse<ShareRequestResult>>[] = [];\n        const nodeSigs = [];\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push((responses[i] as JRPCResponse<CommitmentRequestResult>).result);\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          const p = post<JRPCResponse<ShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(\"ShareRequest\", {\n              encrypted: \"yes\",\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n        return Some<void | JRPCResponse<ShareRequestResult>, BN | undefined>(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x);\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          );\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises: Promise<void | Buffer>[] = [];\n            const nodeIndexes: BN[] = [];\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              const currentShareResponse = shareResponses[i] as JRPCResponse<ShareRequestResult>;\n              if (currentShareResponse?.result?.keys?.length > 0) {\n                currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n                const firstKey = currentShareResponse.result.keys[0];\n                if (firstKey.Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                    iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                    mac: Buffer.from(firstKey.Metadata.mac, \"hex\"),\n                    // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                  };\n                  sharePromises.push(\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\"),\n                    }).catch((err) => log.debug(\"share decryption\", err))\n                  );\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined));\n              }\n              nodeIndexes.push(new BN(indexes[i], 16));\n            }\n            const sharesResolved = await Promise.all(sharePromises);\n            if (sharedState.resolved) return undefined;\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n              return acc;\n            }, [] as { index: BN; value: BN }[]);\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n            let privateKey: BN | null = null;\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j];\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index));\n              const shares = currentCombiShares.map((x) => x.value);\n              const indices = currentCombiShares.map((x) => x.index);\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices);\n              if (!derivedPrivateKey) continue;\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n              const decryptedPubKeyY = decryptedPubKey.slice(66);\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey;\n                break;\n              }\n            }\n            if (privateKey === undefined || privateKey === null) {\n              throw new Error(\"could not derive private key\");\n            }\n            return privateKey;\n          }\n          throw new Error(\"invalid\");\n        });\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey;\n        if (!privateKey) throw new Error(\"Invalid private key returned\");\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n        const decryptedPubKeyY = decryptedPubKey.slice(66);\n        let metadataNonce: BN;\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n          metadataNonce = new BN(nonce || \"0\", 16);\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY });\n        }\n        log.debug(\"> torus.js/retrieveShares\", { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) });\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n);\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey);\n        log.debug(\"> torus.js/retrieveShares\", { ethAddress, privKey: privateKey.toString(16) });\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString(\"hex\", 64),\n          metadataNonce,\n        };\n      });\n  }\n\n  async getMetadata(data: Omit<MetadataParams, \"set_data\" | \"signature\">, options: RequestInit = {}): Promise<BN> {\n    try {\n      const metadataResponse = await post<{ message?: string }>(`${this.metadataHost}/get`, data, options, { useAPIKey: true });\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0);\n      }\n      return new BN(metadataResponse.message, 16); // nonce\n    } catch (error) {\n      log.error(\"get metadata error\", error);\n      return new BN(0);\n    }\n  }\n\n  generateMetadataParams(message: string, privateKey: BN): MetadataParams {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    };\n    const sig = key.sign(keccak256(stringify(setData)).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, options: RequestInit = {}): Promise<string> {\n    try {\n      const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, data, options, { useAPIKey: true });\n      return metadataResponse.message; // IPFS hash\n    } catch (error) {\n      log.error(\"set metadata error\", error);\n      return \"\";\n    }\n  }\n\n  lagrangeInterpolation(shares: BN[], nodeIndex: BN[]): BN | null {\n    if (shares.length !== nodeIndex.length) {\n      return null;\n    }\n    let secret = new BN(0);\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1);\n      let lower = new BN(1);\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg());\n          upper = upper.umod(this.ec.curve.n);\n          let temp = nodeIndex[i].sub(nodeIndex[j]);\n          temp = temp.umod(this.ec.curve.n);\n          lower = lower.mul(temp).umod(this.ec.curve.n);\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n      secret = secret.add(delta);\n    }\n    return secret.umod(this.ec.curve.n);\n  }\n\n  generateAddressFromPrivKey(privateKey: BN): string {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(publicKey, \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  generateAddressFromPubKey(publicKeyX: BN, publicKeyY: BN): string {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString(\"hex\", 64), y: publicKeyY.toString(\"hex\", 64) });\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    isExtended = false\n  ): Promise<string | TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, torusNodePubs, verifier, verifierId, isExtended });\n\n    let finalKeyResult: VerifierLookupResponse | undefined;\n    let isNewKey = false;\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n      let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n      let pubNonce: { x: string; y: string } | undefined;\n      if (this.enableOneKey) {\n        try {\n          nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n          nonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n        } catch {\n          throw new GetOrSetNonceError();\n        }\n        if (nonceResult.typeOfUser === \"v1\") {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X, y: Y })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n        } else if (nonceResult.typeOfUser === \"v2\") {\n          if (nonceResult.upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X, y: Y })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n            pubNonce = nonceResult.pubNonce;\n          }\n        } else {\n          throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n        }\n      } else {\n        typeOfUser = \"v1\";\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y });\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      }\n\n      X = modifiedPubKey.getX().toString(16);\n      Y = modifiedPubKey.getY().toString(16);\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getPublicAddress\", { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce });\n\n      if (!isExtended) return address;\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n        upgraded: (nonceResult as { upgraded?: boolean })?.upgraded || undefined,\n      };\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  async getOrSetNonce(X: string, Y: string, privKey?: BN, getOnly = false): Promise<GetOrSetNonceResult> {\n    let data: Data;\n    const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey);\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      };\n    }\n    return post<GetOrSetNonceResult>(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true });\n  }\n\n  async getNonce(X: string, Y: string, privKey?: BN): Promise<GetOrSetNonceResult> {\n    return this.getOrSetNonce(X, Y, privKey, true);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    const privKeyBN = new BN(privKey, 16);\n    const nonceBN = new BN(nonce, 16);\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString(\"hex\");\n  }\n}\n\nexport default Torus;\n","export * from \"./interfaces\";\nexport { default } from \"./torus\";\nexport * from \"./utils\";\n"],"names":["loglevel","log","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","Error","constructor","errors","responses","predicate","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","generateJsonRPCObject","post","JsonStringify","createKeccakHash","GetOrSetNonceError","kCombinations","s","k","set","from","_","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","keyLookup","endpoints","verifier","verifierId","lookupPromises","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","initialPoint","Math","floor","random","signedData","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","acceptedErrorMsgs","includes","keccak256","a","hash","update","digest","decrypt","generatePrivate","getPublic","get","setAPIKey","setEmbedHost","BN","ec","EC","toChecksumAddress","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","enableLogging","v","enableAll","apiKey","embedHost","isGetOrSetNonceError","getUserTypeAndAddress","doesKeyAssign","isNewKey","finalKeyResult","assignResult","debug","pub_key_X","pub_key_Y","keys","nonceResult","nonce","modifiedPubKey","typeOfUser","pubNonce","getOrSetNonce","keyFromPublic","y","add","keyFromPrivate","finalX","getX","finalY","getY","address","generateAddressFromPubKey","metadataNonce","setCustomKey","privKeyHex","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","retrieveShares","indexes","verifierParams","idToken","extraParams","promiseArr","tmpKey","pubKey","tokenCommitment","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndexes","currentShareResponse","sort","b","Index","cmp","firstKey","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","ciphertext","Share","padStart","sharesResolved","all","decryptedShares","curr","value","allCombis","privateKey","currentCombi","currentCombiShares","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","nodeIndex","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","info","ethAddressLower","publicKeyX","publicKeyY","getPublicAddress","isExtended","upgraded","getOnly","getPostboxKeyFrom1OutOf1","privKeyBN","nonceBN","default"],"sourceRoot":""}